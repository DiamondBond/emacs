#+STARTUP: overview
#+TITLE: Emacs Configuration
#+AUTHOR: Diamond Bond
#+LANGUAGE: en
#+OPTIONS: num:nil

* Preamble
#+begin_quote
Everything should be made as simple as possible, \\
but not any simpler
#+end_quote
* Dependencies
** Packages
*Ubuntu*
#+begin_src sh
  #sudo apt-get build-dep emacs
  sudo apt install bash-completion clang clangd llvm libclang-dev build-essential imagemagick ripgrep git fd-find libxpm-dev libjpeg-dev libgnutls28-dev libgif-dev libtiff-dev libacl1-dev libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev libmagickcore-dev libmagick++-dev libgpm-dev libselinux1-dev libm17n-dev libotf-dev libsystemd-dev libtool-bin pandoc texlive-latex-recommended texlive-extra-utils texlive-latex-extra cmake cmake-extras html2ps groff xhtml2ps notmuch offlineimap msmtp clang clang-tools clangd ccls llvm libclang-dev build-essential imagemagick ripgrep git fd-find libxpm-dev libjpeg-dev libgnutls28-dev libgif-dev libtiff-dev libacl1-dev libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev libmagickcore-dev libmagick++-dev libgpm-dev libselinux1-dev libm17n-dev libotf-dev libsystemd-dev libtool-bin pandoc texlive-latex-recommended texlive-extra-utils texlive-latex-extra cmake cmake-extras html2ps groff xhtml2ps emacs-common-non-dfsg libjansson-dev editorconfig glslang-dev glslang-tools sbcl slime shellcheck rustc cargo pipenv wordnet gcc g++ make libsdl2-dev gnutls-bin libxml2-utils python3-pip gnugo gnuchess xboard libgccjit0 htop ffmpeg wget curl xdotool wmctrl slop wkhtmltopdf mupdf mupdf-tools appmenu-gtk2-module mediainfo unoconv exiftool unrar rar unace ace p7zip-full wordnet w3m-el xsel xclip xpdf
#+end_src

*Python*
#+begin_src bash
  pip3 install black pyflakes isort nose pytest pygifsicle pyls pyls-black nose2 simple-server httpserver future python-lsp-server autopep8 jedi jedi-language-server
#+end_src
** Files
Certain files & folders must exist.

#+begin_quote
~/.emacs.d

~/org => ~/Dropbox/org

~/pdfs

~/mail

~/.offlineimaprc

~/.config/offlineimap

~/.config/offlineimap/postsync.sh
#+end_quote
** Emacs
How to compile and install.
*** Grabbing sources
Clone the latest emacs sources:
#+begin_src sh
  cd ~/git
  git clone -b master git://git.sv.gnu.org/emacs.git
#+end_src
*** Configuration
We configure emacs to compile with various flags.
#+begin_src sh
  ./autogen.sh
  ./configure --with-dbus --with-gif --with-jpeg --with-png --with-rsvg --with-tiff --with-xft --with-xpm --with-gpm=no --disable-silent-rules --with-modules --with-file-notification=inotify --with-mailutils --with-x=yes --with-x-toolkit=gtk3 --with-xwidgets --with-lcms2 --with-imagemagick --with-xml2 --with-json --with-harfbuzz --with-native-compilation CFLAGS="-O3 -mtune=native -march=native -fomit-frame-pointer"
#+end_src
*** Building
We build with all cores and natively compile everything ahead of time. This will take some time.
#+begin_src sh
  make NATIVE_FULL_AOT=1 -j$(nproc)
  sudo make install
#+end_src
* QoL section
Quality-of-life modifications for a more pleasant Emacs experience.
** Enable line numbers
Emacs breaks certain modes when it has line-numbers-mode enabled, (like docview or ansi-term) so we utilize the approach of only enabling it on some major modes rather than globally.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
#+END_SRC
** Enable column numbers
Show column number in modeline.
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC
** Set font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 120)
#+end_src
** Set background
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(background-color . "honeydew"))
#+end_src
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Show parent parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Disable the default startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+END_SRC
** Disable most gui elements
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode 1)
  (scroll-bar-mode 1)
#+END_SRC
** Enable copy-pasting outside of Emacs
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC
** Disable automatic creation of backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** Enable conservative scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 1)
  (setq mouse-wheel-scroll-amount '(1))
  (setq mouse-wheel-progressive-speed nil)
#+END_SRC
** Disable ring-bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Indentation
Set tabs & indents to 4sp.
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
  (setq c-basic-offset tab-width)
  (setq-default electric-indent-inhibit t)
  (setq-default indent-tabs-mode t)
  (setq backward-delete-char-untabify-method 'nil)
#+END_SRC
** Enable prettify symbols mode
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
** Enable bracket pair-matching
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
							  (?\{ . ?\})
							  (?\( . ?\))
							  (?\[ . ?\])
							  (?\" . ?\")
							  ))
  (electric-pair-mode t)
#+END_SRC
** Creating a new window switches your cursor to it
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
	(interactive)
	(split-window-below)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
	(interactive)
	(split-window-right)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Transform yes-or-no questions into y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Easier resize bindigs
Super - Control - <arrow>
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-C-<down>") 'shrink-window)
  (global-set-key (kbd "s-C-<up>") 'enlarge-window)
#+END_SRC
** Defer loading most packages for quicker startup times
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t)
#+END_SRC
** Mouse Move
#+begin_src emacs-lisp
  (defun warp-mouse-to-current-window ()
	(interactive)
	(destructuring-bind (left top right bottom)
						(window-edges)
						(set-mouse-position (selected-frame) left top)))
#+end_src
** Window title
#+BEGIN_SRC emacs-lisp
  ;;(setq-default frame-title-format '("" "%b - Emacs " emacs-version))
  (setq-default frame-title-format '("" "%b"))
  ;;(setq my-username (getenv "USERNAME"))
  ;;(setq frame-title-format '("%b - Emacs @ " my-hostname))
#+END_SRC
** Browser
#+BEGIN_SRC emacs-lisp
  ;; use eww
  ;;(setq browse-url-browser-function 'eww-browse-url)

  ;; use browser depending on url
  (setq
   browse-url-handlers
   '(
	 ("wikipedia\\.org" . browse-url-firefox)
	 ("github" . browse-url-firefox)
	 ("reddit" . browse-url-chromium)
	 ("thefreedictionary\\.com" . eww-browse-url)
	 ("." . browse-url-default-browser)
	 ))
#+END_SRC
* Keybinds
** Description
Personal & global key maps.
** Code
#+begin_src emacs-lisp
  ;;---------------------------------------------------------------------
  ;; personal map
  ;;---------------------------------------------------------------------

  (define-prefix-command 'z-map)
  (global-set-key (kbd "C-1") 'z-map) ;; Ctrl-1

  (define-key z-map (kbd "f") 'find-file-other-frame)
  (define-key z-map (kbd "D") 'dashboard-refresh-buffer)
  (define-key z-map (kbd "d") 'dired-other-frame)
  (define-key z-map (kbd "g") '+default/search-cwd)
  (define-key z-map (kbd "G") 'org-mark-ring-goto)
  (define-key z-map (kbd "2") 'make-frame-command)
  (define-key z-map (kbd "0") 'delete-frame)
  (define-key z-map (kbd "o") 'other-frame)

  (define-key z-map (kbd "b") 'display-battery-mode)
  (define-key z-map (kbd "t") 'display-time-mode)

  (define-key z-map (kbd "*") 'calc)
  (define-key z-map (kbd "R") 'rainbow-mode)
  (define-key z-map (kbd "O") 'org-redisplay-inline-images)
  (define-key z-map (kbd "s") 'ispell-word)
  (define-key z-map (kbd "W") 'elfeed)
  (define-key z-map (kbd "w") 'eww)
  (define-key z-map (kbd "F") 'browse-url-firefox)

  ;; (define-key z-map (kbd "X") 'xah-math-input-mode)
  (define-key z-map (kbd "x") 'switch-to-buffer-other-frame)
  (define-key z-map (kbd "k") 'compile)
  (define-key z-map (kbd "e") 'eval-region)

  (define-key z-map (kbd "U") 'go-board-undo)
  (define-key z-map (kbd "P") 'go-board-next)
  (define-key z-map (kbd "S") 'speedbar-frame-mode)

  (define-key z-map (kbd "a") #'(lambda () (interactive) (find-file-other-window "~/org/agenda.org")))
  (define-key z-map (kbd "C-c") 'calendar)
  (define-key z-map (kbd ".") 'org-date-from-calendar)

  (define-key z-map (kbd "i") (lambda () (interactive) (find-file "~/org/dex.org")))
  (define-key z-map (kbd "n") (lambda () (interactive) (find-file "~/org/notes.org")))
  (define-key z-map (kbd "c") (lambda () (interactive) (find-file "~/.emacs.d/config.org")))

  ;;---------------------------------------------------------------------
  ;; global map
  ;;---------------------------------------------------------------------

  (global-set-key (kbd "<f9>") 'tab-bar-mode)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "<f6>") 'menu-bar-mode)
  (global-set-key (kbd "<f7>") 'scroll-bar-mode)
  (global-set-key (kbd "<f8>") 'tool-bar-mode)
  (global-set-key (kbd "<f12>") 'linum-mode)
  (global-set-key (kbd "<f10>") 'compile)
  (global-set-key (kbd "C-x w") 'elfeed)
  (global-set-key (kbd "C-x x") 'window-swap-states)
#+END_SRC
* =Org= mode
** Description
Sensible and well-defined org-mode configuration with org-capture support.
Also enables org-bullets & htmlize.
** Code
#+BEGIN_SRC emacs-lisp
  (use-package org
	:config
	(add-hook 'org-mode-hook
			  #'(lambda ()
				  (visual-line-mode 1)))
	(setq org-display-inline-images t)
	(setq org-redisplay-inline-images t)
	(setq org-startup-with-inline-images "inlineimages")
	(setq org-directory "~/org")
	(setq org-agenda-files (list "inbox.org"))
	(setq initial-major-mode 'org-mode)
	(global-set-key (kbd "C-<f1>") (lambda()
									 (interactive)
									 (show-all)))
	(setq org-directory "~/org"
		  org-image-actual-width nil
		  +org-export-directory "~/org/export"
		  org-default-notes-file "~/org/inbox.org"
		  org-id-locations-file "~/org/.orgids"
		  org-agenda-files (directory-files-recursively "~/Dropbox/org/" "\\.org$")
		  ;; org-export-in-background t
		  org-catch-invisible-edits 'smart)

	;; src exec
	(org-babel-do-load-languages 'org-babel-load-languages
								 '(
								   (shell . t)
								   )
								 )

	(setq org-capture-templates
		  '(("i" "Inbox" entry (file+headline "~/org/inbox.org" "Inbox")
			 "* %?\n%a\nEntered on %U")
			;; "* %?\nEntered on %U\n  %i\n  %a")
			("j" "Journal" entry (file+datetree "~/org/journal.org")
			 "* %?\n%a\nEntered on %U")))
	(define-key global-map (kbd "C-c c") 'org-capture)
	(global-set-key (kbd "C-c l") 'org-store-link)
	)

  (use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package htmlize
	:ensure t)
#+END_SRC
* Eshell
** Description
Improve eshell prompt and assign aliases & custom helper functions for easier use.
** Prompt
#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-regexp "^[^αλ\n]*[αλ] ")
  (setq eshell-prompt-function
		(lambda nil
		  (concat
		   (if (string= (eshell/pwd) (getenv "HOME"))
			   (propertize "~" 'face `(:foreground "#99CCFF"))
			 (replace-regexp-in-string
			  (getenv "HOME")
			  (propertize "~" 'face `(:foreground "#99CCFF"))
			  (propertize (eshell/pwd) 'face `(:foreground "#99CCFF"))))
		   (if (= (user-uid) 0)
			   (propertize " α " 'face `(:foreground "#FF6666"))
			 (propertize " λ " 'face `(:foreground "#A6E22E"))))))

  (setq eshell-highlight-prompt nil)
#+END_SRC
** Aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'open 'find-file-other-window)
  (defalias 'clean 'eshell/clear-scrollback)
#+END_SRC
** Functions
*** Open files as root
#+BEGIN_SRC emacs-lisp
  (defun eshell/sudo-open (filename)
	"Open a file as root in Eshell."
	(let ((qual-filename (if (string-match "^/" filename)
							 filename
						   (concat (expand-file-name (eshell/pwd)) "/" filename))))
	  (switch-to-buffer
	   (find-file-noselect
		(concat "/sudo::" qual-filename)))))
#+END_SRC
*** Super - Control - RET to open eshell
#+BEGIN_SRC emacs-lisp
  (defun eshell-other-window ()
	"Create or visit an eshell buffer."
	(interactive)
	(if (not (get-buffer "*eshell*"))
		(progn
		  (split-window-sensibly (selected-window))
		  (other-window 1)
		  (eshell))
	  (switch-to-buffer-other-window "*eshell*")))

  (global-set-key (kbd "<s-C-return>") 'eshell-other-window)
#+END_SRC
* Use-package
** Initialize =auto-package-update=
*** Description
Auto-package-update automatically updates and removes old packages.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
	:defer nil
	:ensure t
	:config
	(setq auto-package-update-delete-old-versions t)
	(setq auto-package-update-hide-results t)
	(auto-package-update-maybe))
#+END_SRC
** Initialize =diminish=
*** Description
Diminish hides minor modes to prevent cluttering your mode line.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package diminish
	:ensure t)
#+END_SRC
** Initialize =dashboard=
*** Description
An extensible emacs startup screen.
I have hardcoded in three buffers that I frequently visit along with helper functions.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
	:ensure t
	:defer nil
	:preface
	(defun init-edit ()
	  "Edit initialization file"
	  (interactive)
	  (find-file "~/.emacs.d/init.el"))
	(defun notes-edit ()
	  "Edit notes file"
	  (interactive)
	  (find-file "~/org/notes.org"))
	(defun config-edit ()
	  "Edit configuration file"
	  (interactive)
	  (find-file "~/.emacs.d/config.org"))
	(defun create-scratch-buffer ()
	  "Create a scratch buffer"
	  (interactive)
	  (switch-to-buffer (get-buffer-create "*scratch*"))
	  (lisp-interaction-mode))
	:config
	(dashboard-setup-startup-hook)
	(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
	(setq dashboard-items '((recents . 5)))
	(setq dashboard-banner-logo-title "Welcome to Emacs!")
	;;(setq dashboard-startup-banner "~/.emacs.d/img/emacs.png")
	(setq dashboard-startup-banner 'logo)
	(setq dashboard-center-content t)
	(setq dashboard-show-shortcuts nil)
	(setq dashboard-set-init-info t)
	(setq dashboard-init-info (format "%d packages loaded in %s"
									  (length package-activated-list) (emacs-init-time)))
	(setq dashboard-set-footer nil)
	(setq dashboard-set-navigator t)
	(setq dashboard-navigator-buttons
		  `(((,nil
			  "Scratch"
			  "Switch to the scratch buffer"
			  (lambda (&rest _) (create-scratch-buffer))
			  'default)
			 (nil
			  "Notes"
			  "Open personal notes"
			  (lambda (&rest _) (notes-edit))
			  'default)
			 (nil
			  "Config"
			  "Open Emacs configuration"
			  (lambda (&rest _) (config-edit))
			  'default)
			 ))))
#+END_SRC
** Initialize =which-key=
*** Description
Possible completion framework with 1s delay.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t
	:diminish which-key-mode
	:init
	(which-key-mode)
	:config
	(setq which-key-idle-delay 0.3))
#+END_SRC
** Initialize =swiper=
*** Description
C-s to spawn a search minibuffer that can be traversed via C-n and C-p & <RET>.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package swiper
	:ensure t
	:bind ("C-s" . 'swiper))
#+END_SRC
** Initialize =evil=
*** Description
Heresy; Vim keybindings in Emacs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package evil
	:ensure t
	:defer nil
	:init
	(setq evil-want-keybinding nil)
	(setq evil-want-C-u-scroll t)
	:config
	(evil-mode 1)
	(evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle))

  (use-package evil-collection
	:after evil
	:ensure t
	:config
	(evil-collection-init))
#+END_SRC
** Initialize =avy=
*** Description
M-s to jump to desired character.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package avy
	:ensure t
	:bind
	("M-s" . avy-goto-char))
#+END_SRC
** Initialize =switch-window=
*** Description
C-x o and pick window (a,s,d...)
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
	:ensure t
	:config
	(setq switch-window-input-style 'minibuffer)
	(setq switch-window-increase 4)
	(setq switch-window-threshold 2)
	(setq switch-window-shortcut-style 'qwerty)
	(setq switch-window-qwerty-shortcuts
		  '("a" "s" "d" "f" "j" "k" "l"))
	:bind
	([remap other-window] . switch-window))
#+END_SRC
** Initialize =ido=
*** Description
Better buffer management.
*ido-grid-mode*
#+begin_quote
This enables arrow keys to select while in ido mode. If you want to
instead use the default Emacs keybindings, change it to
"'C-n-and-C-p-only"
(setq ido-grid-define-keys 'C-n-C-p-up-and-down)
#+end_quote
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package ido
	:ensure t
	:init
	(ido-mode 1)
	:config
	(setq ido-enable-flex-matching nil)
	(setq ido-create-new-buffer 'always)
	(setq ido-everywhere t))

  (use-package ido-grid-mode
	:ensure t
	:init
	(ido-grid-mode 1))
#+END_SRC
** Initialize =async=
*** Description
Utilize asynchronous processes whenever possible.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package async
	:ensure t
	:init
	(dired-async-mode 1)
	:config
	(async-bytecomp-package-mode 1))
#+END_SRC
** Initialize =page-break-lines=
*** Description
This Emacs library provides a global mode which displays ugly form feed characters as tidy horizontal rules.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
	:ensure t
	:diminish (page-break-lines-mode visual-line-mode))
#+END_SRC
** Initialize =undo-tree=
*** Description
The `undo-tree-mode' provided by this package replaces Emacs' undo system with a system that treats undo history as what it is: a branching tree of changes.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
	:ensure t
	:diminish undo-tree-mode)
#+END_SRC
** Initialize =treemacs=
*** Description
Tree layout file explorer.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
	:ensure t
	:defer t
	:init
	(with-eval-after-load 'winum
	  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
	:config
	(progn
	  (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
			treemacs-deferred-git-apply-delay      0.5
			treemacs-display-in-side-window        t
			treemacs-eldoc-display                 t
			treemacs-file-event-delay              5000
			treemacs-file-follow-delay             0.2
			treemacs-follow-after-init             t
			treemacs-git-command-pipe              ""
			treemacs-goto-tag-strategy             'refetch-index
			treemacs-indentation                   2
			treemacs-indentation-string            " "
			treemacs-is-never-other-window         nil
			treemacs-max-git-entries               5000
			treemacs-missing-project-action        'ask
			treemacs-no-png-images                 nil
			treemacs-no-delete-other-windows       t
			treemacs-project-follow-cleanup        nil
			treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
			treemacs-recenter-distance             0.1
			treemacs-recenter-after-file-follow    nil
			treemacs-recenter-after-tag-follow     nil
			treemacs-recenter-after-project-jump   'always
			treemacs-recenter-after-project-expand 'on-distance
			treemacs-show-cursor                   nil
			treemacs-show-hidden-files             t
			treemacs-silent-filewatch              nil
			treemacs-silent-refresh                nil
			treemacs-sorting                       'alphabetic-desc
			treemacs-space-between-root-nodes      t
			treemacs-tag-follow-cleanup            t
			treemacs-tag-follow-delay              1.5
			treemacs-width                         30)
	  (treemacs-resize-icons 11)

	  (treemacs-follow-mode t)
	  (treemacs-filewatch-mode t)
	  (treemacs-fringe-indicator-mode t)
	  (pcase (cons (not (null (executable-find "git")))
				   (not (null (executable-find "python3"))))
		(`(t . t)
		 (treemacs-git-mode 'deferred))
		(`(t . _)
		 (treemacs-git-mode 'simple))))
	:bind
	(:map global-map
		  ("M-0"       . treemacs-select-window)
		  ("C-x t 1"   . treemacs-delete-other-windows)
		  ("C-x t t"   . treemacs)
		  ("C-x t B"   . treemacs-bookmark)
		  ("C-x t C-t" . treemacs-find-file)
		  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
	:after treemacs evil
	:ensure t)

  (use-package treemacs-icons-dired
	:after treemacs dired
	:ensure t
	:config (treemacs-icons-dired-mode))
#+END_SRC
** Initialize =magit=
*** Description
Git porcelain for Emacs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package magit
	:ensure t)
#+END_SRC
** Initialize =elfeed=
*** Description
RSS reader for Emacs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
	:ensure t
	:config
	(setq elfeed-feeds
		  '(("https://www.archlinux.org/feeds/news/" archlinux)
			("https://www.gnome.org/feed/" gnome)
			("http://nullprogram.com/feed/" nullprog)
			("https://planet.emacslife.com/atom.xml" emacs community)
			("https://www.ecb.europa.eu/rss/press.html" economics eu)
			("https://drewdevault.com/blog/index.xml" drew devault)
			("https://news.ycombinator.com/rss" ycombinator news) ("https://www.phoronix.com/rss.php" phoronix))))
#+END_SRC
** Initialize =pdf-tools=
*** Description
PDF Tools is, among other things, a replacement of DocView for PDF files. The key difference is that pages are not pre-rendered by e.g. ghostscript and stored in the file-system, but rather created on-demand and stored in memory.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
	:ensure t
	:defer t
	:commands (pdf-view-mode pdf-tools-install)
	:mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
	:load-path "site-lisp/pdf-tools/lisp"
	:magic ("%PDF" . pdf-view-mode)
	:config
	(pdf-tools-install 'no-query)
	(define-pdf-cache-function pagelabels)
	;; (evil-set-initial-state 'pdf-view-mode 'normal)
	:hook ((pdf-view-mode-hook . (lambda () (display-line-numbers-mode -1)))
		   (pdf-view-mode-hook . pdf-tools-enable-minor-modes)))

  (use-package pdf-view-restore
	:after pdf-tools
	:ensure t
	:config
	(add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))

  (use-package org-pdftools
	:ensure t
	:hook (org-load-hook . org-pdftools-setup-link))
#+END_SRC
** Initialize =nov=
*** Description
Major mode for reading EPUBs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package nov
	:mode ("\\.epub\\'" . nov-mode))
#+END_SRC
** Initialize =vterm=
*** Description
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm, a C library. As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.
*** Code
#+begin_src emacs-lisp
  (use-package vterm
	:ensure t)
#+end_src
** Initialize =company=
*** Description
Company is the autocompletion frontend that takes all the backends and gives you possible autocompletions when writing programs. We use it here for C/C++.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package company
	:ensure t
	:diminish (company-mode irony-mode)
	:config
	(setq company-idle-delay 0)
	(setq company-minimum-prefix-length 3)
	(define-key company-active-map (kbd "M-n") nil)
	(define-key company-active-map (kbd "M-p") nil)
	(define-key company-active-map (kbd "C-n") #'company-select-next)
	(define-key company-active-map (kbd "C-p") #'company-select-previous)
	(define-key company-active-map (kbd "SPC") #'company-abort)
	:hook
	((c-mode c++-mode) . company-mode))
#+END_SRC
** Initialize =yasnippet=
*** Description
Yasnippet provides useful snippets.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
	:ensure t
	:diminish yas-minor-mode
	:hook
	((c-mode c++-mode) . yas-minor-mode)
	:config
	(yas-reload-all))

  (use-package yasnippet-snippets
	:ensure t)
#+END_SRC
** Initialize =saveplace=
*** Description
Saves cursor location in buffers.
*** Code
#+begin_src emacs-lisp
  (use-package saveplace
	:ensure t
	:defer nil
	:config
	(save-place-mode))
#+end_src
** Initialize =rainbow-delimiters=
*** Description
Rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.
*** Code
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
	:ensure t
	:hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Initialize =notmuch=
*** Description
Notmuch email configuration.
*** Code
#+begin_src emacs-lisp
  (use-package notmuch
	:ensure t
	:commands (notmuch)
	:config
	(add-hook 'notmuch-hello-mode-hook
			  (lambda () (display-line-numbers-mode 0)))

	;; setup the mail address and use name
	(setq mail-user-agent 'message-user-agent)
	(setq user-mail-address "diamondbond1@gmail.com"
		  user-full-name "Diamond")
	;; smtp config
	(setq smtpmail-smtp-server "smtp.gmail.com"
		  message-send-mail-function 'message-smtpmail-send-it)

	;; report problems with the smtp server
	(setq smtpmail-debug-info t)
	;; add Cc and Bcc headers to the message buffer
	(setq message-default-mail-headers "Cc: \nBcc: \n")
	;; postponed message is put in the following draft directory
	(setq message-auto-save-directory "~/mail/draft")
	(setq message-kill-buffer-on-exit t)
	;; change the directory to store the sent mail
	(setq message-directory "~/mail/")
	;; show newest emails on top
	(setq notmuch-search-oldest-first nil)
	;; Function to refresh local mail box from within emacs
	(defun notmuch-exec-offlineimap ()
	  "execute offlineimap"
	  (interactive)
	  (set-process-sentinel
	   (start-process-shell-command "offlineimap"
									"*offlineimap*"
									"offlineimap -o")
	   #'(lambda (process event)
		   (notmuch-refresh-all-buffers)
		   (let ((w (get-buffer-window "*offlineimap*")))
			 (when w
			   (with-selected-window w (recenter (window-end)))))))))
#+end_src
** Initialize =modus-themes=
*** Description
Accessible themes for GNU Emacs, conforming with the highest standard for colour contrast between background and foreground values (WCAG AAA).
*** Code
#+begin_src emacs-lisp
  (use-package emacs
	:ensure t
	:defer nil
	:config
	(setq custom-safe-themes t)

	;; TODO simplify this to avoid formatting a string, then read and eval.
	(defmacro modus-themes-format-sexp (sexp &rest objects)
	  `(eval (read (format ,(format "%S" sexp) ,@objects))))

	(defvar modus-themes-after-load-hook nil
	  "Hook that runs after loading a Modus theme.
		 See `modus-operandi-theme-load' or `modus-vivendi-theme-load'.")

	(dolist (theme '("operandi" "vivendi"))
	  (modus-themes-format-sexp
	   (defun modus-%1$s-theme-load ()
		 (setq modus-%1$s-theme-slanted-constructs t
			   modus-%1$s-theme-bold-constructs nil
			   modus-%1$s-theme-fringes nil ; {nil,'subtle,'intense}
			   modus-%1$s-theme-mode-line nil ; {nil '3d,'moody}
			   modus-%1$s-theme-syntax 'faint ; {nil,faint,'yellow-comments,'green-strings,'yellow-comments-green-strings,'alt-syntax,'alt-syntax-yellow-comments}
			   modus-%1$s-theme-intense-hl-line nil
			   modus-%1$s-theme-intense-paren-match 'intense-bold
			   modus-%1$s-theme-links 'neutral-underline ; {nil,'faint,'neutral-underline,'faint-neutral-underline,'no-underline}
			   modus-%1$s-theme-no-mixed-fonts nil
			   modus-%1$s-theme-prompts nil ; {nil,'subtle,'intense}
			   modus-%1$s-theme-completions 'moderate ; {nil,'moderate,'opinionated}
			   ;; modus-themes-region 'bg-only-no-extend
			   modus-%1$s-theme-diffs nil ; {nil,'desaturated,'fg-only}
			   modus-%1$s-theme-org-blocks 'grayscale ; {nil,'grayscale,'rainbow}
			   ;; modus-themes-org-habit 'traffic-light ; {nil,'simplified,'traffic-light}
			   modus-%1$s-theme-headings  ; Read the manual for this one
			   '((t . nil))
			   modus-%1$s-theme-variable-pitch-headings t
			   modus-%1$s-theme-scale-headings nil
			   modus-%1$s-theme-scale-1 1.1
			   modus-%1$s-theme-scale-2 1.15
			   modus-%1$s-theme-scale-3 1.21
			   modus-%1$s-theme-scale-4 1.27
			   modus-%1$s-theme-scale-5 1.33)
		 (load-theme 'modus-%1$s t)
		 (run-hooks 'modus-themes-after-load-hook))
	   theme))

	(defun modus-themes-light ()
	  "Load `modus-operandi' and disable `modus-vivendi'."
	  (disable-theme 'modus-vivendi)
	  (modus-operandi-theme-load))

	(defun modus-themes-dark ()
	  "Load `modus-vivendi' and disable `modus-operandi'."
	  (disable-theme 'modus-operandi)
	  (modus-vivendi-theme-load))

	(defun modus-themes-toggle ()
	  "Toggle between `modus-operandi' and `modus-vivendi' themes."
	  (interactive)
	  (if (eq (car custom-enabled-themes) 'modus-operandi)
		  (modus-themes-dark)
		(modus-themes-light))
	  (dashboard-refresh-buffer))

	;; Load light theme 
	;;(modus-themes-light) ;; OR (modus-themes-load-vivendi)

	:bind ("<S-f5>" . modus-themes-toggle))
#+end_src
** Built-in entry: =eldoc=
*** Description
Supress eldoc from modeline.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
	:ensure t
	:diminish eldoc-mode)
#+END_SRC
* Languages
** C & C++
*** Description
Irony is the company backend for C and C++
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
	:defer nil
	:ensure t)

  (use-package company-irony
	:defer nil
	:ensure t
	:config
	(setq company-backends '((company-c-headers
							  company-dabbrev-code
							  company-irony))))
  (use-package irony
	:defer nil
	:ensure t
	:config
	:hook
	((c++-mode c-mode) . irony-mode)
	('irony-mode-hook) . 'irony-cdb-autosetup-compile-options)
#+END_SRC
** Go
*** Description
Go-mode covers it all.
*** Code
#+begin_src emacs-lisp
  (use-package go-mode
	:ensure t
	:mode "\\.go\\'"
	:hook ((go-mode . subword-mode)))
#+end_src
** Python
*** Description
Elpy for basics.
Jedi for better autocomplete and static code analysis, also integrates with company.
Autopep8 which automatically applies proper python coding standards on save, if not already.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package elpy
	:ensure t
	:config
	(elpy-enable)
	(setq python-shell-interpreter "ipython"
		  python-shell-interpreter-args "-i --simple-prompt"
		  elpy-rpc-backend "jedi")
	(pyvenv-workon "+")
	(setq elpy-modules
		  '(elpy-module-sane-defaults
			elpy-module-company
			elpy-module-eldoc
			elpy-module-pyvenv
			elpy-module-yasnippet
			elpy-module-django)))

  (use-package jedi-core
	:ensure t)

  (use-package company-jedi
	:ensure t
	:config
	;; (setq jedi:environment-virtualenv (list (expand-file-name "~/.virtualenvs")))
	(add-hook 'python-mode-hook 'jedi:setup)
	(setq jedi:complete-on-dot t)
	(setq jedi:use-shortcuts t)
	(defun config/enable-company-jedi ()
	  (add-to-list 'company-backends 'company-jedi))
	(add-hook 'python-mode-hook 'config/enable-company-jedi))

  (use-package py-autopep8
	:ensure t
	:hook (python-mode . py-autopep8-enable-on-save))
#+END_SRC
** JSON
*** Description
Syntax highlighting for json files. Hopefully lighter weight than javascript mode.
*** Code
#+begin_src emacs-lisp
  (use-package json-mode
	:ensure t
	:mode ("\\.json\\'" . json-mode))
#+end_src
** Markdown
*** Description
Markdown-mode & enable auto fill.
*** Code
#+begin_src emacs-lisp
  (use-package markdown-mode
	:mode "\\.md\\'"
	:hook ((markdown-mode . auto-fill-mode)))
#+end_src
** Common Lisp
*** Description
SLIME - Common Lisp REPL.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package slime
	:ensure t
	:defer nil
	:config
	(setq inferior-lisp-program "sbcl")
	(setq slime-contribs '(slime-fancy)))
#+END_SRC
** Scheme Lisp
*** Description
Geiser - Scheme Lisp REPL.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package geiser
	:ensure t
	:defer nil
	:config
	(setq geiser-active-implementations '(mit)))

  (defun geiser-save ()
	(interactive)
	(geiser-repl--write-input-ring))
#+end_src
