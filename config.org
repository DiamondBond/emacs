#+STARTUP: overview
#+TITLE: Emacs Configuration
#+AUTHOR: Diamond Bond
#+DESCRIPTION: Eight Megabytes And Constantly Swapping
#+LANGUAGE: en
#+html: <a href="https://www.gnu.org/software/emacs/"><img alt="GNU Emacs" src="https://github.com/minad/corfu/blob/screenshots/emacs.svg?raw=true"></a>
#+html: <img src="img/gnusstorm-2.gif">
#+OPTIONS: toc:nil num:nil

* Introduction
Sensible Emacs distro aimed at enhancing the default experience.

** Principles

This configuration and all associated modules intend to follow the below priniciples.

*** Performant

Provides a responsive experience that adheres to form follows function principles.

*** Reproducible

Utilizes straight.el for reproducibility & increased stability.

*** Literate

Every elisp snippet is commented or documented.

Provide verbose doc-strings and inline code commentary.

*** Correct

Aggressively utilizes best practices.

Where possible, we will leverage built-in Emacs functionality instead of external packages.

*** Modular

The base configuration only sets up Emacs to have a cleaner presentation with sensible defaults.

The implication is that someone should be able to install or copy code from this configuration into their own configuration or vice versa.

** Modules

This list is in chronological load order.

*early-init.el*
- [[file:early-init.el][early-bootstrap]] :: Early bootstrap

*init.el*
- [[file:init.el][bootstrap]] :: Bootstrap straight.el

*config.org*
- [[https://github.com/DiamondBond/emacs/blob/master/config.org#base][base]] :: Base configuration
- [[https://github.com/DiamondBond/emacs/blob/master/config.org#keybinds][keybinds]] :: Keybinding maps
- [[https://github.com/DiamondBond/emacs/blob/master/config.org#use-package][packages]] :: Package manifest
- [[https://github.com/DiamondBond/emacs/blob/master/config.org#languages][languages]] :: Language manifest
- [[https://github.com/DiamondBond/emacs/blob/master/config.org#functions][functions]] :: Function definitions

*userconfig.org*
- [[https://github.com/DiamondBond/emacs/blob/master/userconfig.org][user]] :: User configuration

*modules/mail.org*
- [[https://github.com/DiamondBond/emacs/blob/master/modules/mail.org][mail]] :: Mail configuration

** Dependencies

Some dependencies required to run this Emacs distro.

*** Packages
**** System

#+begin_quote
offlineimap
fzf ripgrep ag
clang clangd llvm
texlive-core texlive-bin texlive-science
imagemagick
editorconfig
libjansson
rust-all cargo
nodejs npm
libxml2
gopls
gnuplot
prettier
hunspell
#+end_quote

**** Python

#+begin_src bash
  pip3 install pyflakes isort nose pytest pygifsicle nose2 httpserver future pandas numpy matplotlib python-rofi
#+end_src

**** Node

Deno & typescript-language-server for Typescript (TS/TSX) support.

#+begin_src bash
  sudo npm install -g deno typescript-language-server bash-language-server
#+end_src

*** Files
**** Dropbox

Symlink ~/org & ~/pdf to their respective subdirs within ~/Dropbox.

#+begin_src sh
  mkdir -p ~/Dropbox/{org,pdfs}; ln -s ~/Dropbox/org ~/org; ln -s ~/Dropbox/pdfs ~/pdfs
#+end_src

**** Auth-Info List

1. ~/org/.authinfo.gpg
2. ~/org/secrets-el.gpg
3. ~/org/network-security.data
4. ~/.emacs.d/custom.el

   NOTE: 'auth-info' can be backed up and restored to/from ~/org with =M-x
   sync/personal-backup= & =M-x sync/personal-restore=.
* Installation
** 0. Install Emacs

[[https://github.com/DiamondBond/emacs/blob/master/docs/emacsfromsource.org][Emacs]] build instructions.

** 1. Clone this repository

#+caption: Command to clone this Emacs distros =git= repository.
#+name: li#git_clone
#+begin_src sh

  git clone https://github.com/diamondbond/emacs ~/git/emacs

#+end_src

** 2. Install the configuration

#+caption: Command to install this Emacs distro.
#+name: li#install
#+begin_src sh

  mv ~/.emacs.d ~/.emacs.d.old

  cd ~/git/emacs
  chmod +x install.sh
  ./install.sh

#+end_src

** 3. Bootstrap Emacs

  This will take some time.
  NOTE: Please answer y for vterm-modules to be autoinstalled.

#+caption: Command to bootstrap this Emacs distro.
#+name: li#bootstrap
#+begin_src sh

  emacs --daemon

#+end_src

** 4. Connect to Emacs

#+caption: Command to connect to Emacs daemon.
#+name: li#connectemacs
#+begin_src sh

  emacsclient -c -n -a 'emacs'

#+end_src

** 5. Post Setup

Once Emacs launches for the first time we need to setup a few more things for everything to work as intended.

*** Compile pdf-tools

Install pdf-tools.

#+begin_quote
  M-x pdf-tools-install
#+end_quote

*** Compile vterm modules

Compile vterm-modules & setup vterm.

#+begin_quote
  M-x vterm
#+end_quote

*** Setup all-the-icons

Download & install the all-the-icons font.

#+begin_quote
  M-x all-the-icons-install-fonts
#+end_quote

*** Setup LSP

Install [[https://github.com/emacs-lsp/lsp-mode#supported-languages][language servers]] manually (see [[https://github.com/DiamondBond/emacs#dependencies][dependencies]]) or with =M-x lsp-install-server=

*** Setup Email

Refer to the [[https://github.com/DiamondBond/emacs/blob/master/docs/setupemail.org][Email setup documentation]] for this functionality.

* Header
Enable lexical binding.
#+begin_src emacs-lisp
  ;;; config.el --- Configuration. -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022 Diamond Bond
  ;; This file is NOT part of GNU Emacs.
  ;; This file is free software.

  ;; Author: Diamond Bond <diamondbond1@gmail.com>
  ;; URL: https://github.com/diamondbond/emacs
  ;; Package-Requires: ((emacs "28.1"))

  ;;; Commentary:
  ;; This file provides the sanctioned configuration.

  ;;; Code:

#+end_src
* Base
** Personal
*** Identity
#+begin_src emacs-lisp
  (setq user-full-name "Diamond Bond"
		user-mail-address "diamondbond1@gmail.com"
		erc-nick '("diamondbond" "diamondbond_")
		erc-nick-short "diamondbond"
		rcirc-default-user-name "diamondbond"
		rcirc-default-nick      "diamondbond"
		rcirc-default-full-name "Diamond Bond")
#+end_src
*** Authentication
Set authinfo file location and authinfo expiry to never.
#+begin_src emacs-lisp
  (if (file-exists-p "~/.authinfo.gpg")
	  (setq auth-sources '("~/.authinfo" "~/.authinfo.gpg")
			auth-source-cache-expiry nil))

  ;; ask for encryption password once
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
#+end_src
** Performance
*** Garbage collect when in minibuffer
While the minibuffer is open, garbage collection will never occur, but once we make a selection, or cancel, garbage collection will kick off immediately and then revert back to the default, sensible behavior.
#+begin_src emacs-lisp
  (defun my-minibuffer-setup-hook ()
	"Garbage collection will never occur."
	(setq gc-cons-threshold most-positive-fixnum))

  (defun my-minibuffer-exit-hook ()
	"Garbage collection will kick off immediately."
	(setq gc-cons-threshold gc-cons-threshold-original))

  (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
#+end_src
*** Garbage collect on focus-out
#+begin_src emacs-lisp
  (add-hook 'focus-out-hook #'garbage-collect)
#+end_src
*** Do not steal focus while doing async compilations
#+begin_src emacs-lisp
  (setq warning-suppress-types '((comp)))
#+end_src
*** Turn off ad-redef warnings
#+begin_src emacs-lisp
  (setq ad-redefinition-action 'accept)
#+end_src
*** Potentially speed up cursor operations
https://emacs.stackexchange.com/questions/28736
#+begin_src emacs-lisp
  (setq auto-window-vscroll nil)
#+end_src
** Files
*** Bookmarks
**** Set file location
Set bookmarks file location to ~/org/bookmarks
#+begin_src emacs-lisp
  (when (file-directory-p "~/org")
	(if (file-exists-p "~/org/bookmarks")
		(setq bookmark-default-file "~/org/bookmarks")))
#+end_src
**** Configure autosaving
#+begin_src emacs-lisp
  (setq bookmark-save-flag 1) ; everytime bookmark is changed, automatically save it
  (setq bookmark-save-flag t) ; save bookmark when Emacs quits
  (setq bookmark-save-flag nil) ; never auto save.
#+end_src
*** Custom file
Offload the custom-set-variables to a separate file.
This keeps your init.el neater and you have the option to gitignore your custom.el if you see fit.
#+begin_src emacs-lisp
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
	(write-region "" nil custom-file))
   ;;; Load custom file. Don't hide errors. Hide success message
  (load custom-file nil t)
#+end_src
*** Load custom themes
#+begin_src emacs-lisp
  (when (file-exists-p (expand-file-name "themes/" user-emacs-directory))
	(add-to-list 'custom-theme-load-path (expand-file-name "themes/" user-emacs-directory)))
#+end_src
*** Don't ask for confirmation when opening symlinked file
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
*** Disable automatic creation of backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
  (setq vc-make-backup-files nil)
#+END_SRC
*** Delete trailing whitespace on save
#+begin_src emacs-lisp
  (add-hook 'before-save-hook
			'delete-trailing-whitespace)
#+end_src
** Environment
*** Use UTF-8
UTF-8 please.
#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
*** Set default dir
#+begin_src emacs-lisp
  (when (file-directory-p "~/org")
	(setq default-directory "~/"))
#+end_src
*** Set Pager
Essential for using shells in Emacs.
#+begin_src emacs-lisp
  (setenv "PAGER" "cat")
#+end_src
*** Disable ring-bell
Disable the annoying bell.
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
*** Configure scrolling
**** Enables nice-scrolling for Emacs 28+
#+begin_src emacs-lisp
  (setq scroll-margin 0)
  (setq scroll-conservatively 100000)
  (setq scroll-preserve-screen-position 1)
#+end_src
**** Enables pixel-scroll-precision-mode for Emacs 29+
#+begin_src emacs-lisp
  ;; (pixel-scroll-precision-mode)
#+end_src
*** Enable external-bound copy-pasting
#+BEGIN_SRC emacs-lisp
  (setq select-enable-clipboard t)
  (setq save-interprogram-paste-before-kill t)
#+END_SRC
*** Pair matching
**** Enable paren-mode
Show parent parentheses.
#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0
		show-paren-style 'parenthesis)
  (show-paren-mode 1)
#+END_SRC
**** Enable bracket pair-matching
Match brackets.
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '((?\{ . ?\})
							  (?\( . ?\))
							  (?\[ . ?\])
							  (?\" . ?\")))
  (electric-pair-mode t)
#+END_SRC
*** Indentation
Set tabs & indents to 4sp.
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
  (setq-default indent-tabs-mode t)
  (setq-default electric-indent-inhibit nil)
  (setq backward-delete-char-untabify-method 'nil)
  (electric-indent-mode t) ; Auto indentation
#+END_SRC
*** Set C/C++ tabs & braces
#+begin_src emacs-lisp
  (setq c-default-style "linux")
  (setq c-basic-offset tab-width)
#+end_src
*** Enable subword-mode
#+begin_src emacs-lisp
  (global-subword-mode 1)
  (add-hook 'c-mode-common-hook
			(lambda () (subword-mode 1)))
#+end_src
** Display
*** Appearance
**** Set font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-12"))
#+end_src
**** Set time format
#+begin_src emacs-lisp
  (setq-default display-time-format "%I:%M %p")
#+end_src
**** Set fill-column
#+begin_src emacs-lisp
  (setq-default fill-column 80)
#+end_src
**** Set linum format
#+begin_src emacs-lisp
  (setq linum-format "%4d ")
#+end_src
**** Show trailing whitespace
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
			(lambda ()
			  (setq show-trailing-whitespace t)))
#+end_src
**** Set window title
Make window title the buffer name.
#+BEGIN_SRC emacs-lisp
  (setq-default frame-title-format '("%b"))
#+END_SRC
**** Uniquify buffer name
#+begin_src emacs-lisp
  (setq-default uniquify-buffer-name-style 'forward)
#+end_src
**** Set internal border width
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(internal-border-width . 0))
#+end_src
**** Fill space provided by WM
Emacs will fill up the space reported by the window manager.
#+begin_src emacs-lisp
  (setq window-resize-pixelwise t)
  (setq frame-resize-pixelwise t)
#+end_src
**** Disable default startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+END_SRC
**** Disable some gui elements
Disable =tool-bar= as it consumes too many pixels from our total frame-size.
Keep =scroll-bar= as it provides contextual information regarding your whereabouts in the buffer.
Keep =menu-bar= as it provides quick access to certain functions.
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'menu-bar-mode)
	  (menu-bar-mode 1))
  (if (fboundp 'tool-bar-mode)
	  (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode)
	  (scroll-bar-mode 1))
#+END_SRC
**** Configure fringe
Disable fringe-mode.
#+begin_src emacs-lisp
  (fringe-mode nil)
  (setq-default fringes-outside-margins nil)
  (setq-default indicate-buffer-boundaries nil)
  (setq-default indicate-empty-lines nil)
  (setq-default overflow-newline-into-fringe t)
#+end_src
**** Configure default-frame-alist
Place the scrollbar on the right side when using x-toolkit=athena.
Optionally; enable toolbar when using x-toolkit=athena.
#+begin_src emacs-lisp
  (set-scroll-bar-mode 'right) ;; Enable right scrollbar
  ;; (add-to-list 'default-frame-alist '(tool-bar-lines . 1)) ;; Enable toolbar
#+end_src
*** Modes
**** Enable column-numbers-mode
Show column number in modeline.
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC
**** Enable global-highlight-line-mode
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode nil)
#+END_SRC
**** Enable prettify-symbols-mode
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
**** Enable line-numbers-mode
Emacs breaks certain modes when it has line-numbers-mode enabled, (like docview or ansi-term) so we utilize the approach of only enabling it on some major modes rather than globally.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
#+END_SRC
**** Enable visual-line-mode
Enable visual-line-mode in text buffers & org + md4rd.
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'md4rd-mode-hook 'visual-line-mode)
#+end_src
** Aliases
*** Basic
Some basic aliases & transform yes-or-no into y-or-n.
#+begin_src emacs-lisp
  (defalias 'first 'car)
  (defalias 'second 'cadr)
  (defalias 'third 'caddr)
  (defalias 'when-not 'unless)
  (defalias 'word-count 'count-words)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Fit-frame
Shrinks frame to buffer contents.
#+begin_src emacs-lisp
  (defalias 'shrink-wrap 'fit-frame-to-buffer)
#+end_src
*** Recentf delete
Remove items from recents list.
#+begin_src emacs-lisp
  (defalias 'recentf-delete 'recentf-edit-list)
#+end_src
*** Bookmark delete
Dont accidentally delete all my bookmarks.
#+begin_src emacs-lisp
  (defalias 'bookmark-delete-all 'bookmark-delete)
#+end_src
** Built-in
*** Configure =proced=
Auto-update proced every 5 seconds.
#+begin_src emacs-lisp
  (setq proced-auto-update-flag t)
  (setq proced-auto-update-interval 5)
  (setq proced-descend t)
  (setq proced-filter 'user)
#+end_src
*** Configure =browser=
Firefox as default browser.
#+BEGIN_SRC emacs-lisp
  ;; eww
  ;; (setq browse-url-browser-function 'eww-browse-url)

  ;; firefox
  (setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC
*** Configure =eshell=
**** Description
Improve eshell prompt and assign aliases, also setup some custom helper functions for easier use.
**** Prompt
#+BEGIN_SRC emacs-lisp
  (setq eshell-highlight-prompt nil)
  (setq eshell-prompt-regexp "^[^αλ\n]*[αλ] ")

  (setq eshell-prompt-function
		(lambda nil
		  (concat
		   (if (string= (eshell/pwd) (getenv "HOME"))
			   (propertize "~" 'face `(:foreground "#99CCFF"))
			 (replace-regexp-in-string
			  (getenv "HOME")
			  (propertize "~" 'face `(:foreground "#99CCFF"))
			  (propertize (eshell/pwd) 'face `(:foreground "#99CCFF"))))
		   (if (= (user-uid) 0)
			   (propertize " α " 'face `(:foreground "#FF6666"))
			 (propertize " λ " 'face `(:foreground "#A6E22E"))))))

  (add-hook 'eshell-mode-hook
			(lambda () (global-hl-line-mode 0)))
#+END_SRC
**** Clear
#+begin_src emacs-lisp
  (defun eshell/clear-scrollback ()
	"Clear the scrollback content of the eshell window."
	(let ((inhibit-read-only t))
	  (erase-buffer)))
#+end_src
**** Aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'open 'find-file-other-window)
  (defalias 'clean 'eshell/clear-scrollback)
#+END_SRC
**** Open eshell in other window
#+BEGIN_SRC emacs-lisp
  (defun eshell-other-window ()
	"Create or visit an eshell buffer."
	(interactive)
	(if (not (get-buffer "*eshell*"))
		(progn
		  (split-window-sensibly (selected-window))
		  (other-window 1)
		  (eshell))
	  (switch-to-buffer-other-window "*eshell*")))
#+END_SRC
* Keybinds
** Description
Global, private & sane key maps.
** Code
#+begin_src emacs-lisp
  ;;---------------------------------------------------------------------
  ;; z-map definition
  ;;---------------------------------------------------------------------

  (define-prefix-command 'z-map)
  (global-set-key (kbd "C-1") 'z-map)

  ;;---------------------------------------------------------------------
  ;; private-map
  ;;---------------------------------------------------------------------

  ;; general
  (define-key z-map (kbd "a") 'org-agenda)
  (define-key z-map (kbd "f") 'find-file-other-frame)
  (define-key z-map (kbd "D") 'dashboard-refresh-buffer)
  (define-key z-map (kbd "d") 'dired-other-frame)
  (define-key z-map (kbd "g") 'org-mark-ring-goto)
  (define-key z-map (kbd "G") 'org-mark-ring-goto)
  (define-key z-map (kbd "h") 'global-hl-line-mode)
  (define-key z-map (kbd "2") 'make-frame-command)
  (define-key z-map (kbd "o") 'olivetti-mode)
  (define-key z-map (kbd "m") 'magit-status)
  (define-key z-map (kbd "v") 'vterm)

  ;; modeline
  (define-key z-map (kbd "b") 'display-battery-mode)
  (define-key z-map (kbd "t") 'display-time-mode)

  ;; functions
  (define-key z-map (kbd "*") 'quick-calc)
  (define-key z-map (kbd "O") 'org-redisplay-inline-images)
  (define-key z-map (kbd "s") 'ispell-word)
  (define-key z-map (kbd "W") 'elfeed)
  (define-key z-map (kbd "w") 'eww)
  (define-key z-map (kbd "F") 'follow-mode)
  (define-key z-map (kbd "U") 'undo-redo)

  ;; quick
  (define-key z-map (kbd "C-1") 'display-buffer-other-frame)
  (define-key z-map (kbd "x") 'switch-to-buffer-other-frame)
  (define-key z-map (kbd "k") 'compile)
  (define-key z-map (kbd "e") 'eval-region)

  ;; auxiliary
  (define-key z-map (kbd "S") 'speedbar-frame-mode)
  (define-key z-map (kbd "y") 'yas-minor-mode)
  (define-key z-map (kbd "i") 'consult-imenu)
  (define-key z-map (kbd "I") 'imenu-list)
  (define-key z-map (kbd "9") 'switch-to-qemu-and-run)
  (define-key z-map (kbd "0") 'switch-to-qemu-and-paste)

  ;; calendar
  (define-key z-map (kbd "C-c") 'cfw:open-org-calendar)
  (define-key z-map (kbd ".") 'org-date-from-calendar)

  ;; files
  (define-key z-map (kbd "n") 'notes-edit)
  (define-key z-map (kbd "c") 'config-edit)

  ;;---------------------------------------------------------------------
  ;; global-map
  ;;---------------------------------------------------------------------

  ;; function
  (global-set-key (kbd "<f9>") 'tab-bar-mode)
  (global-set-key (kbd "S-<f9>") 'tab-line-mode)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "<f6>") 'menu-bar-mode)
  (global-set-key (kbd "<f7>") 'scroll-bar-mode)
  (global-set-key (kbd "<f8>") 'tool-bar-mode)
  (global-set-key (kbd "C-<f12>") 'linum-mode)
  (global-set-key (kbd "<f10>") 'compile)

  ;; windows
  (global-set-key (kbd "C-x w") 'elfeed)
  (global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-C-<down>") 'shrink-window)
  (global-set-key (kbd "s-C-<up>") 'enlarge-window)
  (global-set-key (kbd "C-x x") 'window-swap-states)
  (global-set-key (kbd "<s-C-return>") 'eshell-other-window)

  ;; next/prev
  (define-key global-map (kbd "C-S-n") #'next-15-lines)
  (define-key global-map (kbd "C-S-p") #'previous-15-lines)

  ;;---------------------------------------------------------------------
  ;; sane-map
  ;;---------------------------------------------------------------------

  ;; Indent/De-indent selection by one tab length
  (global-set-key (kbd "C->") 'indent-rigidly-right-to-tab-stop)
  (global-set-key (kbd "C-<") 'indent-rigidly-left-to-tab-stop)

  ;; Kill word without copying it to your clipboard
  (global-set-key (kbd "M-DEL") 'sanemacs/backward-kill-word)
  (global-set-key (kbd "C-DEL") 'sanemacs/backward-kill-word)
#+END_SRC
* Use-package
** Core
*** Initialize =elisp=
**** Description
Elisp enhancers.
**** Code
#+begin_src emacs-lisp
  (use-package fn        :demand t) ; function
  (use-package s         :demand t) ; string
  (use-package f         :demand t) ; file
  (use-package ht        :demand t) ; hash table
  (use-package dash      :demand t) ; lists
  (use-package a         :demand t) ; assoc lists
  (use-package ts        :demand t) ; timestamps
  (use-package pcre2el   :demand t) ; sane regex
  (use-package hierarchy :demand t) ; hierarchy
#+end_src
*** Initialize =async=
**** Description
Utilize asynchronous processes whenever possible.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package async
	:straight t
	:demand t
	:init
	(dired-async-mode 1)
	:config
	(async-bytecomp-package-mode 1)
	(add-to-list 'display-buffer-alist '("*Async Shell Command*" display-buffer-no-window (nil))))
#+END_SRC
*** Initialize =alert=
**** Description
Alert is a Growl-workalike for Emacs which uses a common notification interface and multiple, selectable "styles", whose use is fully customizable by the user.
**** Code
#+begin_src emacs-lisp
  (use-package alert
	:straight t
	:config
	(setq alert-fade-time 15))
#+end_src
*** Initialize =evil=
**** Description
Heresy; Vim keybindings in Emacs.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package evil
	:straight t
	:defer nil
	:init
	(setq evil-want-keybinding nil)
	(setq evil-want-C-u-scroll t)
	:config
	(evil-mode 1)
	;; set evil state on a per mode basis
	(evil-set-initial-state 'messages-buffer-mode 'normal)
	(evil-set-initial-state 'dashboard-mode 'emacs)
	(evil-set-initial-state 'vterm-mode 'insert)
	(evil-set-initial-state 'term-mode 'emacs)
	(evil-set-initial-state 'eshell-mode 'emacs)
	(evil-set-initial-state 'inferior-scheme-mode 'emacs)
	(evil-set-initial-state 'md4rd-mode 'emacs)
	(evil-set-initial-state 'mu4e-mode 'emacs)
	(evil-set-initial-state 'mu4e-main-mode 'emacs)
	(evil-set-initial-state 'pdf-view-mode 'emacs)
	;; more granular undo with evil
	(setq evil-want-fine-undo t)
	;; :q kills buffer
	(evil-ex-define-cmd "q" 'delete-window)
	;; org-cycle
	(evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle))
#+END_SRC
*** Initialize =org=
**** Description
Sensible and well-defined org-mode configuration with org-capture support & notifications.
***** Code
#+BEGIN_SRC emacs-lisp
  (use-package org
	:straight t
	:config
	(setq initial-major-mode 'org-mode
		  org-display-inline-images t
		  org-redisplay-inline-images t
		  org-image-actual-width nil
		  org-startup-with-inline-images "inlineimages"
		  org-catch-invisible-edits 'smart
		  org-pretty-entities t)
	(when (file-directory-p "~/org")
	  (setq org-directory "~/org"
			org-agenda-files (list "~/org/inbox.org"
								   "~/org/tasks.org"
								   "~/org/notes.org"
								   "~/org/daily.org")
			org-default-notes-file "~/org/inbox.org"
			org-id-locations-file "~/org/.orgids"))

	(setq org-todo-keywords
		  '((sequence "TODO"
					  "WIP"
					  "WAITING"
					  "|"
					  "DONE"
					  "DEFERRED"
					  "CANCELLED")))

	(when (file-directory-p "~/org")
	  (setq org-refile-targets
			'(("~/org/archive.org" :maxlevel . 1)
			  ("~/org/tasks.org" :maxlevel . 1))))

	;; Save Org buffers after refiling!
	(advice-add 'org-refile :after 'org-save-all-org-buffers)

	(setq org-babel-load-languages
		  '((awk        . t)
			(calc       . t)
			(css        . t)
			(emacs-lisp . t)
			(gnuplot    . t)
			(haskell    . t)
			(js         . t)
			(lisp       . t)
			(org        . t)
			(python     . t)
			(scheme     . t)
			(shell      . t)
			(C          . t)
			(ein        . t)
			(sql        . t)))

	(org-babel-do-load-languages 'org-babel-load-languages
								 '((shell . t)))

	;; org templates
	(when (file-directory-p "~/org")
	  (setq org-capture-templates
			'(("i" "Inbox" entry (file+headline "~/org/inbox.org" "Inbox")
			   "* %?\n%a\nEntered on %U")
			  ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
			   "* %?\n%a\nEntered on %U"))))

	:bind
	("C-c c" . 'org-capture)
	("C-c l" . 'org-store-link)
	("C-<f1>" . (lambda()(interactive)(show-all))))

  ;; reminders
  (use-package org-wild-notifier
	:straight t
	:after org
	:config
	(setq alert-default-style 'libnotify)
	(setq org-wild-notifier-alert-time '(1 5 10 15 30 60))
	(setq org-wild-notifier-keyword-whitelist nil)
	(setq org-wild-notifier-notification-title "*reminder*")
	:init
	(org-wild-notifier-mode 1))

  ;; display org schedules
  (use-package calfw-org
	:straight t
	:defer 2
	:config
	(setq cfw:org-agenda-schedule-args '(:timestamp :scheduled :deadline)))
#+end_src
*** Initialize =dired=
**** Description
Add icons and subtree's to dired.
**** Code
#+begin_src emacs-lisp
      (use-package dired
	:straight (:type built-in)
	    :commands (dired dired-jump)
	    :bind ("C-x C-j" . dired-jump)
	    :custom ((dired-listing-switches "-agho --group-directories-first")))

      (use-package dired-single
	    :commands (dired dired-jump))

      (use-package all-the-icons-dired
	    :straight t
	    :diminish all-the-icons-dired-mode
	    :config
	    :hook (dired-mode . (lambda ()
						      (interactive)
						      (unless (file-remote-p default-directory)
							    (all-the-icons-dired-mode)))))

      (use-package dired-open
	    :commands (dired dired-jump)
	    :config
	    (setq dired-open-extensions '(("png" . "nomacs")
								      ("jpg" . "nomacs")
								      ("mp4" . "mpv")
								      ("mkv" . "mpv"))))

      (use-package dired-subtree
	    :straight t
	    :config
	    (advice-add 'dired-subtree-toggle
				    :after (lambda () (interactive)
						     (when all-the-icons-dired-mode
						       (revert-buffer)))))
#+end_src
** Keys
*** Initialize =elmacro=
**** Description
Shows keyboard macros or latest interactive commands as Emacs lisp.
**** Code
#+begin_src emacs-lisp
  (use-package elmacro
	:straight t)
#+end_src
*** Initialize =which-key=
**** Description
Possible completion framework with 0.3s delay.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package which-key
	:straight t
	:init
	(which-key-mode)
	:config
	(setq which-key-idle-delay 0.3))
#+END_SRC
*** Initialize =switch-window=
**** Description
C-x o and pick window (a,s,d...)
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
	:straight t
	:config
	(setq switch-window-input-style 'minibuffer)
	(setq switch-window-increase 4)
	(setq switch-window-threshold 2)
	(setq switch-window-shortcut-style 'qwerty)
	(setq switch-window-qwerty-shortcuts
		  '("a" "s" "d" "f" "j" "k" "l"))
	:bind
	([remap other-window] . switch-window))
#+END_SRC
*** Initialize =dabbrev=
**** Description
Expand the word in the buffer before point as a dynamic abbrev, by searching for words starting with that abbreviation ( dabbrev-expand ).
**** Code
#+begin_src emacs-lisp
  ;; use dabbrev with Corfu!
  (use-package dabbrev
	:straight t
	;; swap M-/ and C-M-/
	:bind (("M-/" . dabbrev-completion)
		   ("C-M-/" . dabbrev-expand)))
#+end_src
** Tools
*** Initialize =auto-package=update=
Manually update packages.
#+begin_src emacs-lisp
  (use-package auto-package-update
	:straight t
	:commands update-packages
	:custom
	(auto-package-update-delete-old-versions t)
	:config
	(auto-package-update-maybe))
#+end_src
*** Initialize =yasnippet=
**** Description
Yasnippet provides useful snippets.
**** Code
#+begin_src emacs-lisp
  (use-package yasnippet
	:straight t
	:diminish yas-minor-mode
	:hook
	((c-mode c++-mode) . yas-minor-mode)
	:config
	(yas-reload-all))

  (use-package yasnippet-snippets
	:after yasnippet
	:straight t)
#+end_src
*** Initialize =calfw=
**** Description
Calendar view in Emacs buffer.
**** Code
#+begin_src emacs-lisp
  (use-package calfw
	:straight t)
#+end_src
*** Initialize =crux=
**** Description
A Collection of Ridiculously Useful eXtensions.
**** Code
#+begin_src emacs-lisp
  (use-package crux
	:straight t)
#+end_src
*** Initialize =0x0=
**** Description
Instant upload to 0x0.st
**** Code
#+begin_src emacs-lisp
  (use-package 0x0
	:straight t
	:commands (0x0-dwim 0x0-popup 0x0-upload-file 0x0-upload-text))
#+end_src
*** Initialize =clm=
**** Description
Show event history and command history of some or all buffers.
**** Code
#+begin_src emacs-lisp
  (use-package command-log-mode
	:straight t
	:diminish command-log-mode)
#+end_src
*** Initialize =vterm=
**** Description
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm, a C library. As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.
**** Code
#+begin_src emacs-lisp
  (use-package vterm
	:straight t
	:config
	:config
	(add-hook 'vterm-mode-hook
			  (lambda () (global-hl-line-mode 0)))
	(setq vterm-max-scrollback 10000))
#+end_src
** Completion
*** Initialize =corfu=
**** Description
Completion Overlay Region FUnction - Corfu enhances completion at point with a small completion popup. The current candidates are shown in a popup below or above the point. Corfu is the minimalistic completion-in-region counterpart of the Vertico minibuffer UI.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package corfu
	:straight t
	:custom
	(corfu-auto t)
	(corfu-auto-prefix 3)
	(corfu-auto-delay 0)
	(corfu-echo-documentation 0)
	(corfu-quit-no-match 'separator)
	(corfu-preview-current nil)
	(define-key corfu-map (kbd "<escape>") #'corfu-quit)
	(define-key corfu-map (kbd "C-h") #'corfu-show-documentation)
	(define-key corfu-map (kbd "RET") nil)
	:init (global-corfu-mode)
	:config
	;; adapted from Corfu's manual.
	(defun contrib/corfu-enable-always-in-minibuffer ()
	  "Enable Corfu in the minibuffer if Vertico is not active.
  Useful for prompts such as `eval-expression' and `shell-command'."
	  (unless (bound-and-true-p vertico--input)
		(corfu-mode 1)))

	(add-hook 'minibuffer-setup-hook #'contrib/corfu-enable-always-in-minibuffer 1))
#+END_SRC
*** Initialize =cape=
**** Description
Completio at point extensions.
**** Code
#+begin_src emacs-lisp
  (use-package cape
	:straight t
	:config
	(setq cape-dabbrev-min-length 3)
	(dolist (backend '( cape-symbol cape-keyword cape-file cape-dabbrev))
	  (add-to-list 'completion-at-point-functions backend)))
#+end_src
*** Initialize =vertico-&-friends=
**** Description
Vertico, orderless, marginalia, consult & embark.
**** Code
#+begin_src emacs-lisp
  ;; enable vertico
  (use-package vertico
	:straight (:files (:defaults "extensions/*"))
	:bind (:map vertico-map
				("C-j" . vertico-next)
				("C-k" . vertico-previous)
				("M-j" . vertico-next)
				("M-k" . vertico-previous)
				("C-f" . vertico-exit)
				;; 		   ("M-j" . vertico-next)
				;; 		   ("M-k" . vertico-previous)
				:map minibuffer-local-map
				("M-h" . backward-kill-word))
	:custom
	(vertico-cycle t)
	:init
	(vertico-mode)
	;; Grow and shrink the Vertico minibuffer
	(setq vertico-resize t)
	;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
	(setq vertico-cycle t)
	:config
	(vertico-mouse-mode))

  ;; configure directory extension.
  (use-package vertico-directory
	:straight nil
	:load-path "straight/repos/vertico/extensions"
	:after vertico
	:ensure nil
	:bind (:map vertico-map
				("RET" . vertico-directory-enter)
				("DEL" . vertico-directory-delete-char)
				("M-DEL" . vertico-directory-delete-word)))

  (use-package orderless
	:straight t
	:init
	(setq completion-styles '(orderless basic)
		  completion-category-defaults nil
		  completion-category-overrides '((file (styles basic partial-completion)))))

  ;; persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
	:straight t
	:init
	(savehist-mode))

  ;; information in the margins
  (use-package marginalia
	:straight t
	:after vertico
	:init
	(marginalia-mode))

  ;; Consult provides practical commands based on the Emacs completion function completing-read.
  (use-package consult
	:straight t
	:bind
	(("M-y" . consult-yank-from-kill-ring)
	 ("C-s" . consult-line)
	 ("C-x r b" . consult-bookmark)
	 ("C-x b" . consult-buffer)))

  ;; Emacs Mini-Buffer Actions Rooted in Keymaps
  (use-package embark
	:straight t
	:bind
	(("C-." . embark-act)         ;; pick some comfortable binding
	 ("C-;" . embark-dwim)        ;; good alternative: M-.
	 ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
	:init
	;; optionally replace the key help with a completing-read interface
	(setq prefix-help-command #'embark-prefix-help-command)
	:config
	;; hide the mode line of the Embark live/completions buffers
	(add-to-list 'display-buffer-alist
				 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
				   nil
				   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
	:straight t
	:after (embark consult)
	:demand t ; only necessary if you have the hook below
	;; if you want to have consult previews as you move around an
	;; auto-updating embark collect buffer
	:hook
	(embark-collect-mode . consult-preview-at-point-mode))

  ;; a few more useful configurations...
  (use-package emacs
	:init
	;; add prompt indicator to `completing-read-multiple'.
	;; alternatively try `consult-completing-read-multiple'.
	(defun crm-indicator (args)
	  (cons (concat "[CRM] " (car args)) (cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	;; do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
		  '(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	;; Emacs 28: hide commands in M-x which do not work in the current mode.
	;; Vertico commands are hidden in normal buffers.
	(setq read-extended-command-predicate
		  #'command-completion-default-include-p)

	;; enable recursive minibuffers
	(setq enable-recursive-minibuffers t)

	;; completion ignores case
	(setq completion-ignore-case t)
	(setq read-file-name-completion-ignore-case t)

	;; allow Emacs to resize mini windows
	(setq resize-mini-windows t))
#+end_src
*** Initialize =all-the-icons=
**** Description
All the icons!
#+begin_src emacs-lisp
  (use-package all-the-icons
	:straight t)

  (use-package all-the-icons-completion
	:after (marginalia all-the-icons)
	:hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
	:init
	(all-the-icons-completion-mode))
#+end_src
*** Initialize =kind-icon=
**** Description
Kind icons.
**** Code
#+begin_src emacs-lisp
  (use-package kind-icon
	:straight t
	:after corfu
	:custom
	(kind-icon-use-icons t)
	(kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
	(kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
	(kind-icon-blend-frac 0.08)
	:config
	(add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
** Git
*** Initialize =magit=
**** Description
The definitive Git porcelain for Emacs.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package magit
	:straight t)
#+END_SRC
*** Initialize =autorevert=
**** Description
Autorevert hooked buffers & diminish auto-revert-mode.
**** Code
#+begin_src emacs-lisp
  (use-package autorevert
	:straight t
	:after magit
	:diminish auto-revert-mode
	:init
	(setq auto-revert-verbose nil)
	:hook ((prog-mode
			text-mode
			tex-mode
			org-mode
			conf-mode) . auto-revert-mode))
#+end_src
** News
*** Initialize =elfeed=
**** Description
RSS reader for Emacs.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
	:straight t
	:config
	(setq elfeed-feeds
		  '(("https://www.archlinux.org/feeds/news/" archlinux)
			("https://www.gnome.org/feed/" gnome)
			("http://nullprogram.com/feed/" nullprog)
			("https://planet.emacslife.com/atom.xml" emacs community)
			("https://www.ecb.europa.eu/rss/press.html" economics eu)
			("https://drewdevault.com/blog/index.xml" drew devault)
			("https://news.ycombinator.com/rss" ycombinator news)
			("https://www.phoronix.com/rss.php" phoronix))))
#+END_SRC
*** Initialize =gnus=
**** Description
Gnus, or Gnus Network User Services, is a message reader which is part of GNU Emacs.
**** Code
#+begin_src emacs-lisp
  (use-package gnus
	:straight t
	:config
	;; make Gnus startup faster
	(setq gnus-check-new-newsgroups nil
		  gnus-check-bogus-newsgroups nil)

	;; read feeds/atom through Gmane
	(setq gnus-select-method '(nntp "news.gmane.io"))

	;; Gmail
	(setq gnus-select-method
		  '(nnimap "gmail"
				   (nnimap-address "imap.gmail.com")))

	;; make Gnus prettier
	(setq gnus-sum-thread-tree-indent "  ")
	(setq gnus-sum-thread-tree-root "● ")
	(setq gnus-sum-thread-tree-false-root "◯ ")
	(setq gnus-sum-thread-tree-single-indent "◎ ")
	(setq gnus-sum-thread-tree-vertical        "│")
	(setq gnus-sum-thread-tree-leaf-with-other "├─► ")
	(setq gnus-sum-thread-tree-single-leaf     "╰─► ")
	(setq gnus-summary-display-arrow t)
	(setq gnus-summary-line-format
		  (concat
		   "%0{%U%R%z%}"
		   "%3{│%}" "%1{%d%}" "%3{│%}"
		   "  "
		   "%4{%-20,20f%}"
		   "  "
		   "%3{│%}"
		   " "
		   "%1{%B%}"
		   "%s\n"))

	;; fixing summary buffer
	;; there’s no need to recenter the summary buffer all the time, it only slows gnus down.
	(setq gnus-auto-center-summary nil)

	;; enter the summary buffer faster
	(setq gnus-nov-is-evil nil
		  gnus-show-threads t
		  gnus-use-cross-reference nil)

	;; news check
	(defun gnus-demon-scan-news ()
	  (interactive)
	  (when gnus-plugged
		(let ((win (current-window-configuration))
			  (gnus-read-active-file nil)
			  (gnus-check-new-newsgroups nil)
			  (gnus-verbose 2)
			  (gnus-verbose-backends 5))
		  (unwind-protect
			  (save-window-excursion
				(when (gnus-alive-p)
				  (with-current-buffer gnus-group-buffer
					(gnus-group-get-new-news gnus-activate-level))))
			(set-window-configuration win)))))

	;; configuring mail appearance
	(setq gnus-treat-strip-multiple-blank-lines t)
	(setq gnus-treat-trailing-blank-lines t)
	;; let's see some smiles in gnus
	(setq gnus-treat-display-smileys t)
	(setq gnus-treat-emphasize 'head)

	;; fetch only part of the article if we can.
	(setq gnus-read-active-file 'some)
	;; fetch some old headers
	(setq gnus-fetch-old-headers 'some)

	;; Gnus automatic scoring
	(setq gnus-use-adaptive-scoring t)

	;; Gnus sorting
	(setq gnus-thread-sort-functions
		  '(gnus-thread-sort-by-most-recent-date
			(not gnus-thread-sort-by-number))))
#+end_src
*** Initialize =md4rd=
**** Description
Reddit client within Emacs with oauth2 support.
**** Code
#+begin_src emacs-lisp
  (use-package md4rd
	:straight t
	:config
	(setq md4rd-subs-active '(emacs linux lisp+Common_Lisp prolog clojure))
	(load-if-exists "~/.emacs.d/secrets.el.gpg"))
#+end_src
** IRC
*** Initialize =erc=
**** Description
ERC is a powerful, modular, and extensible IRC client for Emacs.

Usage: irc.rizon.net
**** Code
#+begin_src emacs-lisp
  (use-package erc
	:straight t
	:custom
	(erc-autojoin-timing 'ident)
	(erc-autojoin-channels-alist '(("irc.rizon.net" "#rice")))
	(erc-fill-function 'erc-fill-static)
	(erc-fill-static-center 22)
	(erc-hide-list '("JOIN" "PART" "QUIT"))
	(erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
	(erc-lurker-threshold-time 43200)
	(erc-server-reconnect-attempts 5)
	(erc-server-reconnect-timeout 3)
	(erc-quit-reason 'erc-quit-reason-normal)
	(erc-timestamp-format "[%I:%M %p] ")
	(erc-timestamp-only-if-changed-flag nil)
	(erc-truncate-mode t)
	(erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
							   "324" "329" "332" "333" "353" "477"))
	:config
	;; login
	(setq erc-nickserv-identify-mode 'autodetect)
	;; interpret mIRC-style color commands in IRC chats
	(setq erc-interpret-mirc-color t)
	;; kill buffers for channels after /part
	(setq erc-kill-buffer-on-part t)
	;; kill buffers for private queries after quitting the server
	(setq erc-kill-queries-on-quit t)
	;; kill buffers for server messages after quitting the server
	(setq erc-kill-server-buffer-on-quit t)
	;; open query buffers in the current window
	(setq erc-query-display 'buffer)
	;; configure appearance
	(setq erc-prompt " >")
	;; load erc modules
	(add-to-list 'erc-modules 'notifications)
	(add-to-list 'erc-modules 'spelling))
#+end_src
*** Initialize =rcirc=
**** Description
Emacs' builtin irc client.

Usage: irc.libera.chat
**** Code
#+begin_src emacs-lisp
  (use-package rcirc
	:defer
	:commands (irc rcirc)
	:ensure nil
	:config
	(setq rcirc-auto-authenticate-flag t)
	(setq rcirc-time-format "[%I:%M %p] ")
	(rcirc-track-minor-mode 1))
#+end_src
** Documents
*** Initialize =nov=
**** Description
Major mode for reading EPUBs.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package nov
	:straight t
	:defer nil
	:config
	(defun nov-font-setup ()
	  (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
							   :height 1.0)
	  (text-scale-increase 2))
	:mode ("\\.epub\\'" . nov-mode)
	:hook (nov-mode . nov-font-setup))
#+END_SRC
*** Initialize =pdf-tools=
**** Description
PDF Tools is, among other things, a replacement of DocView for PDF files. The key difference is that pages are not pre-rendered by e.g. ghostscript and stored in the file-system, but rather created on-demand and stored in memory.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
	:straight t
	:defer nil
	:commands (pdf-view-mode pdf-tools-install)
	:mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
	:load-path "site-lisp/pdf-tools/lisp"
	:magic ("%PDF" . pdf-view-mode)
	:config
	;; install pdf-tools
	(pdf-tools-install 'no-query)
	;; open pdfs scaled to fit page
	(setq-default pdf-view-display-size 'fit-page)
	;; automatically annotate highlights
	(setq pdf-annot-activate-created-annotations t)
	(define-pdf-cache-function pagelabels)
	:hook ((pdf-view-mode-hook . (lambda () (display-line-numbers-mode -1)))
		   (pdf-view-mode.hook . (lambda () (blink-cursor-mode -1)))
		   (pdf-view-mode-hook . pdf-tools-enable-minor-modes)))

  (use-package pdf-view-restore
	:after pdf-tools
	:straight t
	:config
	:hook (pdf-view-mode . pdf-view-restore-mode))
#+END_SRC
*** Initialize =writegood=
**** Description
Minor mode to aid in finding common writing problems. Highlights text based on a set of weasel-words, passive-voice and duplicate words.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
	:straight t)
#+END_SRC
*** Initialize =synosaurus=
**** Description
Synosaurus is a thesaurus frontend for Emacs with pluggable backends.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package synosaurus
	:straight t)
#+END_SRC
*** Initialize =olivetti=
**** Description
Emacs minor mode for a nice writing environment.
**** Code
#+begin_src emacs-lisp
  (use-package olivetti
	:straight t
	:init
	(setq olivetti-body-width .75))
#+end_src
*** Initialize =saveplace=
**** Description
Saves cursor location in buffers.
**** Code
#+begin_src emacs-lisp
  (use-package saveplace
	:straight t
	:defer nil
	:config
	(save-place-mode))
#+end_src
** Search
*** Initialize =dictionary-mode=
**** Description
Quick lookup in a dictionary.
**** Code
#+begin_src emacs-lisp
  (use-package dictionary
	:straight t
	:commands (dictionary-search)
	:init
	(global-set-key (kbd "C-c d") #'dictionary-search)
	:config (setq dictionary-server "dict.org"))
#+end_src
*** Initialize =engine-mode=
**** Description
engine-mode is a global minor mode for Emacs that enables you to easily define search engines, bind them to keybindings, and query them from the comfort of your editor.
**** Code
#+begin_src emacs-lisp
  (use-package engine-mode
	:straight t
	:config
	(defengine google "https://google.com/search?q=%s" :keybinding "g"
	  :docstring "Applied Google-fu.")
	(defengine google-images "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s" :docstring "Google Images")
	(defengine google-maps "http://maps.google.com/maps?q=%s" :docstring "Mappin' it up.")
	(defengine duckduckgo "https://duckduckgo.com/?q=%s" :keybinding "d"
	  :docstring "DDG!")
	(defengine qwant "https://www.qwant.com/?q=%s" :keybinding "q"
	  :docstring "Qwant it.")
	(defengine wikipedia "https://en.wikipedia.org/wiki/Special:Search?search=%s" :keybinding "w"
	  :docstring "Search Wikipedia.")
	(defengine youtube "http://www.youtube.com/results?aq=f&oq=&search_query=%s" :keybinding "y"
	  :docstring "Search YouTube.")
	(defengine twitter "https://twitter.com/search?q=%s" :keybinding "t"
	  :docstring "Search Twitter.")
	(defengine github "https://github.com/search?ref=simplesearch&q=%s" :keybinding "h"
	  :docstring "Search GitHub.")
	(defengine melpa "https://melpa.org/#/?q=%s" :keybinding "m"
	  :docstring "Search the Milkypostman's Emacs Lisp Package Archive.")
	(defengine stack-overflow "https://stackoverflow.com/search?q=%s" :keybinding "s"
	  :docstring "Search Stack Overflow.")
	(defengine wolfram-alpha "http://www.wolframalpha.com/input/?i=%s" :keybinding "a"
	  :docstring "Search Wolfram Alpha.")
	(defengine rfcs "http://pretty-rfc.herokuapp.com/search?q=%s" :keybinding "r"
	  :docstring "Search RFC documents.")
	(defengine ctan "http://www.ctan.org/search/?x=1&PORTAL=on&phrase=%s" :keybinding "c"
	  :docstring "Search the Comprehensive TeX Archive Network")
	(defengine project-gutenberg "http://www.gutenberg.org/ebooks/search/?query=%s" :keybinding "p"
	  :docstring "Search Project Gutenberg.")
	(engine/set-keymap-prefix (kbd "C-x /"))
	(setq engine/browser-function 'browse-url-firefox)
	:init
	(engine-mode t))
#+end_src
*** Initialize =ripgrep=
**** Description
Deadgrep.
**** Code
#+begin_src emacs-lisp
  (use-package deadgrep
	:straight t
	:commands deadgrep)
#+end_src
*** Initialize =avy=
**** Description
M-s to jump to desired character.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package avy
	:straight t
	:bind
	("M-s" . avy-goto-char))
#+END_SRC
*** Initialize =ag=
**** Description
The Silver Surfer - A code searching tool similar to ack, with a focus on speed.
**** Code
#+begin_src emacs-lisp
  (defvar executable-ag-available?
	(executable-find "ag"))

  (use-package ag
	:if executable-ag-available?
	:init
	(use-package wgrep-ag)
	(setq-default ag-highlight-search t))
#+end_src
*** Initialize =deft=
**** Description
Deft is included for quicksearch of entire ~/org directory.
**** Code
#+begin_src emacs-lisp
  (use-package deft
	:straight t
	:config
	(setq deft-directory org-directory
		  deft-recursive t
		  deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
		  deft-use-filename-as-title t)
	:bind
	("C-c n d" . deft))
#+end_src
** Syntax
*** Initialize =flycheck=
**** Description
Modern on-the-fly syntax checking extension.
**** Code
#+begin_src emacs-lisp
  (use-package flycheck
	:straight t
	:hook (prog-mode . flycheck-mode))
#+end_src
*** Initialize =flyspell=
**** Description
Spell checking.
Enable on the fly with M-x flyspell-mode.
**** Code
#+begin_src emacs-lisp
  (use-package flyspell
	:straight t
	:config
	(setq ispell-program-name "hunspell"
		  ispell-default-dictionary "en_US")
	:bind (("M-<f7>" . flyspell-buffer)))
#+end_src
** Appearance
*** Initialize =diminish=
**** Description
Diminish hides minor modes to prevent cluttering your mode line.
**** Code
#+begin_src emacs-lisp
  (use-package diminish
	:straight t
	:init
	;; diminish as mode is already loaded
	(diminish 'auto-revert-mode "")
	(diminish 'abbrev-mode "")
	(diminish 'subword-mode)
	(diminish 'visual-line-mode)
	(diminish 'outline-mode)
	:config
	;; diminish after mode is loaded
	(eval-after-load "eldoc" '(diminish 'eldoc-mode))
	(eval-after-load "c-mode" '(diminish 'c-mode))
	(eval-after-load "c++-mode" '(diminish 'c++-mode))
	(eval-after-load "which-key" '(diminish 'which-key-mode))
	(eval-after-load "ox-beamer" '(diminish 'org-beamer-mode))
	(eval-after-load "outline" '(diminish 'outline-minor-mode))
	(eval-after-load "auto-revert-mode" '(diminish 'auto-revert-mode ""))
	(eval-after-load "evil-commentary" '(diminish 'evil-commentary-mode))
	(eval-after-load "evil-escape" '(diminish 'evil-escape-mode))
	(eval-after-load "evil-collection-unimpaired" '(diminish 'evil-collection-unimpaired-mode)))
#+end_src
*** Initialize =dashboard=
**** Description
An extensible emacs startup screen.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
	:straight t
	:defer nil
	:diminish dashboard-mode
	:preface
	(defun init-edit ()
	  "Edit initialization file."
	  (interactive)
	  (if (file-exists-p "~/.emacs.d/init.el")
		  (find-file "~.emacs.d/init.el")))
	(defun config-edit ()
	  "Edit configuration file."
	  (interactive)
	  (if (file-exists-p "~/.emacs.d/config.org")
		  (find-file "~/.emacs.d/config.org")))
	(when (file-directory-p "~/org")
	  (defun notes-edit ()
		"Edit notes file."
		(interactive)
		(if (file-exists-p "~/org/notes.org")
			(find-file "~/org/notes.org")))
	  (defun tasks-edit ()
		"Edit tasks file."
		(interactive)
		(if (file-exists-p "~/org/tasks.org")
			(find-file "~/org/tasks.org")))
	  (defun archive-edit ()
		"Edit archive file."
		(interactive)
		(if (file-exists-p "~/org/archive.org")
			(find-file "~/org/archive.org")))
	  (defun inbox-edit ()
		"Edit inbox file."
		(interactive)
		(if (file-exists-p "~/org/inbox.org")
			(find-file "~/org/inbox.org"))))
	(defun create-scratch-buffer ()
	  "Create a scratch buffer."
	  (interactive)
	  (switch-to-buffer (get-buffer-create "*scratch*")))
	:config
	(dashboard-setup-startup-hook)
	(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
	(setq dashboard-items '((recents . 5)))
	;; (setq dashboard-startup-banner (expand-file-name "img/gnusstorm-2.gif" user-emacs-directory))
	(setq dashboard-startup-banner 'official)
	(setq dashboard-center-content t)
	(setq dashboard-show-shortcuts nil)
	(setq dashboard-set-init-info t)
	(setq dashboard-set-footer nil)
	(setq dashboard-set-navigator t)
	(when (file-directory-p "~/org")
	  (setq dashboard-navigator-buttons
			`(;; line 1
			  ((,nil
				"mu4e"
				"Read Email with mu4e"
				(lambda (&rest _) (mu4e))
				'default)
			   (,nil
				"md4rd"
				"Browse Reddit with md4rd"
				(lambda (&rest _) (md4rd))
				'default)
			   (nil
				"elfeed"
				"Read RSS/Atom feeds with Elfeed"
				(lambda (&rest _) (elfeed))
				'default)
			   (nil
				"gnus"
				"Read mailing lists with Gnus"
				(lambda (&rest _) (open-emacs-devel))
				'default))
			  ;; separator
			  ((,nil "==============================" ""
					 (lambda (&rest _) ()) 'default))
			  ;; line 2
			  ((,nil
				"Notes"
				"Open Notes"
				(lambda (&rest _) (notes-edit))
				'default)
			   (nil
				"Tasks"
				"Open Tasks"
				(lambda (&rest _) (tasks-edit))
				'default)
			   (nil
				"Agenda"
				"Open Org-Agenda"
				(lambda (&rest _) (org-agenda nil "n"))
				'default)
			   (nil
				"Inbox"
				"Open Inbox"
				(lambda (&rest _) (inbox-edit))
				'default))))))
#+END_SRC
*** Initialize =modus-themes=
**** Description
Accessible themes for Emacs, conforming with the highest standard for colour contrast between background and foreground values (WCAG AAA).
**** Code
#+begin_src emacs-lisp
  (use-package modus-themes
	:straight t
	:init
	(setq modus-themes-italic-constructs t
		  modus-themes-bold-constructs t
		  modus-themes-region '(accented bg-only no-extend))
	;; load the theme files before enabling a theme
	(modus-themes-load-themes)
	:config
	(modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
	:bind ("S-<f5>" . modus-themes-toggle))
#+end_src
*** Initialize =rainbow-mode=
**** Description
Colorize color names in buffers.
**** Code
#+begin_src emacs-lisp
  (use-package rainbow-mode
	:straight t
	:diminish rainbow-mode
	:hook prog-mode)
#+end_src
*** Initialize =rainbow-delimiters=
**** Description
Rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.
**** Code
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
	:straight t
	:hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Languages
** LSP
*** Description
Language Server Protocol, handles the following languages:
- C/C++
- [WEB] JS/JSX/HTML/CSS
- Python
*** Code
#+begin_src emacs-lisp
  (use-package lsp-mode
	:straight t
	:init
	;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
	(setq lsp-keymap-prefix "C-c l")
	:hook ((c-mode          ; clangd
			c++-mode        ; clangd
			c-or-c++-mode   ; clangd
			js2-mode        ; ts-ls (tsserver wrapper)
			js-mode         ; ts-ls (tsserver wrapper)
			rjsx-mode       ; ts-ls (tsserver wrapper)
			js-jsx-mode     ; ts-ls (tsserver wrapper)
			typescript-mode ; ts-ls (tsserver wrapper)
			python-mode     ; pyright
			rust-mode       ; rust-analyzer
			ruby-mode       ; solargraph
			web-mode        ; ts-ls/HTML/CSS
			) . lsp-deferred)
	:commands (lsp lsp-deferred)
	:config
	(setq lsp-auto-guess-root t)
	(setq lsp-log-io nil)
	(setq lsp-restart 'auto-restart)
	(setq lsp-enable-symbol-highlighting nil)
	(setq lsp-enable-on-type-formatting nil)
	(setq lsp-signature-auto-activate nil)
	(setq lsp-signature-render-documentation nil)
	(setq lsp-eldoc-hook nil)
	(setq lsp-modeline-code-actions-enable nil)
	(setq lsp-modeline-diagnostics-enable nil)
	(setq lsp-headerline-breadcrumb-enable nil)
	(setq lsp-semantic-tokens-enable nil)
	(setq lsp-enable-folding nil)
	(setq lsp-enable-imenu nil)
	(setq lsp-enable-snippet nil)
	(setq lsp-enable-completion-at-point t)
	(setq read-process-output-max (* 1024 1024)) ;; 1MB
	(setq completion-styles '(orderless)
		  completion-category-defaults nil)
	(setq lsp-idle-delay 0.5)
	(setq lsp-clients-typescript-server "typescript-language-server"
		  lsp-clients-typescript-server-args '("--stdio"))
	(setq lsp-disabled-clients '(eslint)))

  (use-package lsp-ui
	:straight t
	:after lsp
	:commands lsp-ui-mode
	:config
	(setq lsp-ui-doc-enable nil)
	(setq lsp-ui-doc-header t)
	(setq lsp-ui-doc-include-signature t)
	(setq lsp-ui-doc-border (face-foreground 'default))
	(setq lsp-ui-sideline-show-code-actions t)
	(setq lsp-ui-sideline-delay 0.05))

  (use-package lsp-pyright
	:straight t
	:after lsp
	:hook (python-mode . (lambda () (require 'lsp-pyright) (lsp-deferred)))
	:init (when (executable-find "python3")
			(setq lsp-pyright-python-executable-cmd "python3")))
#+end_src
** C/C++
Default C/C++ mode is sufficient.
Add modern cpp syntax highlighting.
#+begin_src emacs-lisp
  (use-package modern-cpp-font-lock
	:straight t)
#+end_src
** C#
*** Description
CSharp mode.
*** Code
#+begin_src emacs-lisp
  (use-package csharp-mode
	:straight t)
#+end_src
** Go
*** Description
Go-mode.
*** Code
#+begin_src emacs-lisp
  (use-package go-mode
	:straight t
	:mode "\\.go\\'"
	:config
	(defun db/go-mode-hook()
	  ;;(setq-default tab-width 2)
	  (add-hook 'before-save-hook 'gofmt-before-save)
	  (set (make-local-variable 'compile-command)
		   "go test"))
	:hook ((go-mode . db/go-mode-hook)))
#+end_src
** Rust
*** Description
Rust-mode.
*** Code
#+begin_src emacs-lisp
  (use-package rust-mode
	:straight t
	:mode "\\.rs\\'"
	:hook ((go-mode . subword-mode)))
#+end_src
** Lisp
*** Common Lisp
**** Description
SLIME - Common Lisp REPL.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package slime
	:straight t
	:config
	(setq inferior-lisp-program "/usr/bin/sbcl")
	(setq slime-contribs '(slime-fancy slime-quicklisp)))
#+END_SRC
*** Scheme Lisp
**** Description
Geiser - Scheme Lisp REPL.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package geiser
	:straight t
	:config
	(setq geiser-active-implementations '(chez guile mit))
	(setq geiser-chez-binary "chez")
	(add-hook 'scheme-mode-hook 'geiser-mode)
	(setq geiser-default-implementation 'chez))

  (use-package geiser-chez
	:straight t
	:after geiser
	:config
	(add-to-list 'auto-mode-alist
				 '("\\.sls\\'" . scheme-mode)
				 '("\\.sc\\'" . scheme-mode)))

  (defun geiser-save ()
	"Save geiser repl contents to input ring."
	(interactive)
	(geiser-repl--write-input-ring))
#+end_src
** JSON
*** Description
Syntax highlighting for json files.
*** Code
#+begin_src emacs-lisp
  (use-package json-mode
	:straight t
	:mode ("\\.json\\'" . json-mode))
#+end_src
** CSV
*** Description
Major mode for editing records in a generalized CSV (character-separated values) format.
*** Code
#+begin_src emacs-lisp
  (use-package csv-mode
	:straight t
	:mode ("\\.csv\\'" . csv-mode))
#+end_src
** Lua
*** Description
Lua mode.
*** Code
#+begin_src emacs-lisp
  (use-package lua-mode
	:straight t
	:config
	(setq lua-indent-level 2))
#+end_src
** Ruby
*** Description
Ruby mode.
*** Code
#+begin_src emacs-lisp
  (use-package ruby-mode
	:straight t)
#+end_src
** Python
*** Description
*** Code
#+begin_src emacs-lisp
  (use-package python-mode
	:straight t
	:hook (python-mode-hook . jedi:setup))
#+end_src
** Markdown
*** Description
Markdown-mode & enable auto fill.
*** Code
#+begin_src emacs-lisp
  (use-package markdown-mode
	:straight t
	:mode "\\.md\\'"
	:hook ((markdown-mode . auto-fill-mode)))
#+end_src
** LaTeX
*** Description
Auctex for LaTeX.
*** Code
#+begin_src emacs-lisp
  (use-package tex
	:straight auctex
	:config
	(setq TeX-auto-save t)
	(setq TeX-parse-self t)
	(setq-default TeX-master nil))
#+end_src
** Javascript
*** Description
Improved Javascript editing mode.
*** Code
#+begin_src emacs-lisp
  (use-package js2-mode
	:straight t
	:custom
	(js-indent-level 2)
	(js2-basic-offset 2)
	:init
	(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
#+end_src
** JSX
*** Description
A JSX major mode.
*** Code
#+begin_src emacs-lisp
  (use-package rjsx-mode
	:straight t)
#+end_src
** Typescript
*** Description
TypeScript support for Emacs.
*** Code
#+begin_src emacs-lisp
  (use-package typescript-mode
	:straight t)
#+end_src
** Web
*** Description
Web editing mode.
*** Code
#+begin_src emacs-lisp
  (use-package web-mode
	:straight t
	:custom
	(setq web-mode-markup-indent-offset 2)
	(setq web-mode-code-indent-offset 2)
	(setq web-mode-css-indent-offset 2)
	:mode (("\\.html\\'" . web-mode))
	:commands web-mode)
#+end_src
** Prettier
*** Description
Prettier formatter for JSX & TSX.
*** Code
#+begin_src emacs-lisp
  (use-package prettier-js
	:straight t)

  (add-hook 'web-mode-hook #'(lambda ()
							   (enable-minor-mode
								'("\\.jsx?\\'" . prettier-js-mode))
							   (enable-minor-mode
								'("\\.tsx?\\'" . prettier-js-mode))))
#+end_src
* Functions
** Helpers
*** Load if exists
#+begin_src emacs-lisp
  (defun load-if-exists (f)
	"Load file F if it exists."
	(if (file-exists-p (expand-file-name f))
		(load-file (expand-file-name f))))
#+end_src
*** Enable Minor mode
#+begin_src emacs-lisp
  (defun enable-minor-mode (my-pair)
	"Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
	(if (buffer-file-name)
		(if (string-match (car my-pair) buffer-file-name)
			(funcall (cdr my-pair)))))
#+end_src
*** Erc handlers
#+begin_src emacs-lisp
  (defun erc-start ()
	"Start ERC and connect to Rizon."
	(interactive)
	(save-current-buffer
	  (erc-services-mode 1)
	  (erc-update-modules)
	  (erc :server "irc.rizon.net" :port "6667" :nick erc-nick-short)))

  (defun erc-quit ()
	"Quit ERC."
	(interactive)
	(erc-services-mode 0)
	(erc-quit-server nil))
#+end_src
*** Yank Whole Buffer
#+begin_src emacs-lisp
  (defun yank-whole-buffer ()
	"Yank whole buffer."
	(interactive)
	(save-excursion
	  (mark-whole-buffer)
	  (call-interactively 'evil-yank)))
#+end_src
*** Reading mode
#+begin_src emacs-lisp
  (defun read-mode/disable ()
	"Enablemenubar & scrollbar."
	(interactive)
	(menu-bar-mode 1)
	(scroll-bar-mode 1))

  (defun read-mode/enable ()
	"Disable menubar & scrollbar."
	(interactive)
	(menu-bar-mode -1)
	(scroll-bar-mode -1))
#+end_src
*** Disable all themes
#+begin_src emacs-lisp
  (defun disable-all-themes ()
	"Disable all active themes."
	(dolist (i custom-enabled-themes)
	  (disable-theme i)))
#+end_src
** Buffers
*** Split and follow
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
	"Split and follow horizontally."
	(interactive)
	(split-window-below)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
	"Split and follow vertically."
	(interactive)
	(split-window-right)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
*** Get buffer menu in new frame
#+begin_src emacs-lisp
  ;; https://stackoverflow.com/questions/12014036/emacs-make-frame-switch-buffer
  (defun get-buffer-menu-in-new-frame ()
	"Switch-to-buffer-other-frame in new frame."
	(interactive)
	(switch-to-buffer (list-buffers-noselect)))
#+end_src
** Launchers
*** Music
Run ncmpcpp within vterm.
#+begin_src emacs-lisp
  (defun music ()
	"Play music with ncmpcpp."
	(interactive)
	(run-in-vterm "ncmpcpp"))
#+end_src
*** Open emacs-devel
Launches gnus and connects to news.gmane.io/emacs-devel.
#+begin_src emacs-lisp
  (defun open-emacs-devel ()
	"Read the Emacs-devel mailing list."
	(interactive)
	(setq last-command-event 121)
	(gnus nil)
	(setq last-command-event 121)
	(execute-extended-command nil "gnus" "gnus")
	(setq last-command-event 13)
	(gnus-group-browse-foreign-server
	 `(nntp "news.gmane.io"))
	(setq last-command-event 13)
	(consult-line)
	(setq last-command-event 13)
	(gnus-browse-select-group nil))
#+end_src
*** Start org-agenda
#+begin_src emacs-lisp
  (defun start-to-org-agenda ()
	"Launch focused 'org-agenda'."
	(interactive)
	(org-agenda nil "n")
	(delete-other-windows)
	(fit-frame-to-buffer))
#+end_src
*** Shrinkwrapped bufflist
#+begin_src emacs-lisp
  (defun shrink-wrapped-buffer-list ()
	"Launch frame-fitted *Buffer List*."
	(interactive)
	(switch-to-buffer (list-buffers-noselect))
	(shrink-wrap))
#+end_src
** Inserts
*** Date
Insert date in a buffer in my preferred format
#+begin_src emacs-lisp
  (defun get-date ()
	"Get date."
	(format-time-string "%b %d, %Y"))

  (defun insert-date ()
	"Insert date."
	(interactive)
	(insert (get-date)))
#+end_src
*** Link
Inserts org-mode link template.
#+begin_src emacs-lisp
  (defun insert-org-link-template ()
	"Insert org link template at point."
	(interactive)
	(setq last-command-event 91)
	(org-self-insert-command 1)
	(setq last-command-event 91)
	(org-self-insert-command 1)
	(setq last-command-event 'right)
	(right-char 1)
	(setq last-command-event 91)
	(org-self-insert-command 1))
#+end_src
*** WILD_NOTIFIER
Insert WILD_NOTIFIER properties template.
#+begin_src emacs-lisp
  (defun insert-wild-notifier-template ()
	"Insert WILD_NOTIFIER_NOTIFY_BEFORE template at point."
	(interactive)
	(insert ":PROPERTIES:
:WILD_NOTIFIER_NOTIFY_BEFORE: 60 30 15 10 5
:END:"))
#+end_src
*** Current filename
Insert currently visiting buffer filename.
#+begin_src emacs-lisp
  (defun insert-current-file-name-at-point (&optional full-path)
	"Insert the current filename at point.
  With prefix argument, use FULL-PATH."
	(interactive "P")
	(let* ((buffer
			(if (minibufferp)
				(window-buffer
				 (minibuffer-selected-window))
			  (current-buffer)))
		   (filename (buffer-file-name buffer)))
	  (if filename
		  (insert (if full-path filename (file-name-nondirectory filename)))
		(error (format "Buffer %s is not visiting a file" (buffer-name buffer))))))
#+end_src
** Text Manipulation
*** Next/Prev 15-lines
#+begin_src emacs-lisp
  (defun next-15-lines ()
	"Move to the next 15 lines."
	(interactive)
	(forward-line 15))

  (defun previous-15-lines ()
	"Move to the previous 15 lines."
	(interactive)
	(forward-line -15))
#+end_src
*** Upcase last word
#+begin_src emacs-lisp
  (defun upcase-last-word ()
	"Convert last word to uppercase."
	(interactive)
	(move-end-of-line 1)
	(backward-word 1)
	(upcase-word 1)
	(move-beginning-of-line 1)
	(next-line 1 1))
#+end_src
*** Delete current line
#+begin_src emacs-lisp
  (defun db/delete-current-line ()
	"Kill the whole line on which point is."
	(interactive)
	(beginning-of-line)
	(kill-line 1))
#+end_src
*** Duplicate current line
#+begin_src emacs-lisp
  (defun db/duplicate-line()
	"Duplicate line at point."
	(interactive)
	(save-excursion
	  (move-beginning-of-line 1)
	  (kill-line)
	  (yank)
	  (open-line 1)
	  (forward-line 1)
	  (yank)))
#+end_src
*** Open new line below
#+begin_src emacs-lisp
  (defun open-line-below ()
	"Open a new line below point."
	(interactive)
	(end-of-line)
	(newline)
	(indent-for-tab-command))
#+end_src
*** Open new line above
#+begin_src emacs-lisp
  (defun open-line-above ()
	"Open a new line above point."
	(interactive)
	(beginning-of-line)
	(newline)
	(forward-line -1)
	(indent-for-tab-command))
#+end_src
** Syncing
*** Sync Emacs
Sync Emacs configuration to git.
#+begin_src emacs-lisp
  (defun sync/emacs ()
	"Sync Emacs configuration."
	(interactive)
	(async-shell-command "~/bin/sync-emacs.sh"))

  (defun sync/emacs-lockfile ()
	"Sync Emacs 'lock-file'."
	(interactive)
	(straight-freeze-versions)
	(async-shell-command "cp ~/.emacs.d/straight/versions/default.el ~/git/emacs/straight/versions/"))
#+end_src
*** Sync Mail
Sync Email locally.
#+begin_src emacs-lisp
  (defun sync/mail ()
	"Sync email."
	(interactive)
	(async-shell-command "offlineimap")
	(mu4e-update-index))
#+end_src
*** Sync News
Sync Elfeed & Mail.
#+begin_src emacs-lisp
  (defun sync/news ()
	"Sync; elfeed & email."
	(interactive)
	(sync-mail)
	(elfeed)
	(elfeed-update))
#+end_src
*** Sync Dotfiles
Sync dotfiles (incl. Emacs) to git.
#+begin_src emacs-lisp
  (defun sync/dotfiles ()
	"Sync dotfiles."
	(interactive)
	(async-shell-command "~/bin/sync-dotfiles.sh")
	(alert "Sync Complete." :severity 'trivial))
#+end_src
*** Sync Personal
#+begin_src emacs-lisp
  (defun sync/personal/backup ()
	"Backup authinfo & personal info."
	(interactive)
	;; authinfo
	(async-shell-command "cp ~/.authinfo.gpg ~/org/")
	(async-shell-command "cp ~/.emacs.d/secrets.el.gpg ~/org/")
	(async-shell-command "cp ~/.emacs.d/network-security.data ~/org/")
	;; metadata
	(async-shell-command "cp ~/.emacs.d/custom.el ~/org/"))

  (defun sync/personal/restore ()
	"Restore authinfo & personal info."
	(interactive)
	;; authinfo
	(async-shell-command "cp ~/org/.authinfo.gpg ~/")
	(async-shell-command "cp ~/org/secrets.el.gpg ~/.emacs.d/")
	(async-shell-command "cp ~/org/network-security.data ~/.emacs.d/")
	;; metadata
	(async-shell-command "cp ~/org/custom.el ~/.emacs.d/"))
#+end_src
** Config
*** =config/reload=
#+begin_src emacs-lisp
  (defun config/reload ()
	"Reload Emacs Configuration."
	(interactive)
	(load-file (concat user-emacs-directory "init.el")))
#+end_src
*** =config/open=
#+begin_src emacs-lisp
  (defun config/open ()
	(interactive)
	(find-file (expand-file-name "config.org" user-emacs-directory)))
#+end_src
*** =config/github=
Launches this Emacs' configuration GitHub page with default browser
#+begin_src emacs-lisp
  (defun config/github ()
	"Launches this Emacs' configuration GitHub page in browser."
	(interactive)
	(browse-url-firefox "https://github.com/diamondbond/emacs"))
#+end_src
*** =config/update=
Updates the Emacs configuration.
#+begin_src emacs-lisp
  (defun config/update ()
	"Updates the Emacs configuration."
	(interactive)
	(async-shell-command "cd ~/git/emacs; git pull"))
#+end_src
** Imported
*** =run-in-vterm=
#+begin_src emacs-lisp
  (defun run-in-vterm-kill (process event)
	"A process sentinel.  Kill PROCESS's buffer if it is live with arg EVENT."
	(let ((b (process-buffer process)))
	  (and (buffer-live-p b)
		   (kill-buffer b))))

  (defun run-in-vterm (command)
	"Execute string COMMAND in a new vterm.

	Interactively, prompt for COMMAND with the current buffer's file
	name supplied.  When called from Dired, supply the name of the
	file at point.

	Like `async-shell-command`, but run in a vterm for full terminal features.

	The new vterm buffer is named in the form `*foo bar.baz*`, the
	command and its arguments in earmuffs.

	When the command terminates, the shell remains open, but when the
	shell exits, the buffer is killed."
	(interactive
	 (list
	  (let* ((f (cond (buffer-file-name)
					  ((eq major-mode 'dired-mode)
					   (dired-get-filename nil t))))
			 (filename (concat " " (shell-quote-argument (and f (file-relative-name f))))))
		(read-shell-command "Command: "))))
	(with-current-buffer (vterm (concat "*" command "*"))
	  (set-process-sentinel vterm--process #'run-in-vterm-kill)
	  (vterm-send-string command)
	  (vterm-send-return)))
#+end_src
*** =sanemacs/backward-kill-word=
#+begin_src emacs-lisp
  (defun sanemacs/backward-kill-word ()
	"Kill word backwards without littering 'kill-ring'."
	(interactive )
	(push-mark)
	(backward-word)
	(delete-region (point) (mark)))
#+end_src
*** =comment-line-dwim=
#+begin_src emacs-lisp
  ;; Original idea from
  ;; http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html
  (defun comment-dwim-line (&optional arg)
	"Replacement for the comment-dwim command.
	If no region is selected and current line is not blank and we are not at the end of the line,
	then comment current line.
	Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
	(interactive "*P")
	(comment-normalize-vars)
	(if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
		(comment-or-uncomment-region (line-beginning-position) (line-end-position))
	  (comment-dwim arg)))
#+end_src
*** Convert =camelCase= to =snake_case=
#+begin_src emacs-lisp
  (defun camel-to-snake-case (arg)
	"Convert a camelCase word to snake_case.

  If the prefix argument ARG is non-nil, convert the text to uppercase."
	(interactive "p")
	(progn
	  (let ((start (region-beginning))
			(end (region-end))
			(case-fold-search nil)
			(had-initial-underscore nil))
		(goto-char start)
		(when (looking-at "_") (setq had-initial-underscore t))
		(while (re-search-forward "\\([A-Z]\\)" end t)
		  (replace-match "_\\1")
		  (setq end (1+ end)))
		(if arg
			(upcase-region start end)
		  (downcase-region start end))
		(goto-char start)
		(unless had-initial-underscore (delete-char 1)))))
#+end_src

* Footer
#+begin_src emacs-lisp
  (cd "~/")

  ;;; config.el ends here
#+end_src
