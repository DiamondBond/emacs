#+STARTUP: overview
#+TITLE: emacs configuration
#+LANGUAGE: en
#+OPTIONS: num:nil

* Dependencies
** System
=clang= & =clangd= as backend for C and C++ autocompletion 
=llvm= & =libclang-dev= to install irony server
*Monaco* font

*Personal*
#+begin_src sh
sudo apt install firefox telegram-desktop sxiv zathura zathura-djvu zathura-cb zathura-ps mupdf mupdf-tools mpv hexchat gpick gimp kdenlive inkscape imagemagick kolourpaint xfce4-screenshooter rofi xfce4-appfinder gmrun xdotool slop wmctrl tlp tlp-rdw acpi-call-dkms smartmontools linux-tools-generic cpufrequtils ripgrep gdb flex bison autoconf automake libtool adwaita-icon-theme-full thunderbird obs-studio qutebrowser mousepad xterm torbrowser-launcher bsdgames bsdgames-nonfree meld glew-utils xbacklight light gparted curl wget pavucontrol libnotify-bin gcc libcurl4-gnutls-dev sl screenfetch neofetch scrot cmatrix tree mlocate dosbox audacity galculator nomacs htop transmission-gtk wordnet ubuntu-restricted-extras ttf-mscorefonts-installer lm-sensors powertop default-jre cowsay fortune cowsay-off fortunes filters libglib2.0-dev wkhtmltopdf mpc mpd ncmpcpp tmux python wildmidi timidity fluid-soundfont-gs fluidsynth pmidi timidity-daemon rtv
#+end_src
** Emacs 27.1
How to compile and install Emacs 27.1
*** dependencies (ubuntu)
#+begin_src sh
sudo apt install clang clangd llvm libclang-dev build-essential imagemagick ripgrep git fd-find libxpm-dev libjpeg-dev libgnutls28-dev libgif-dev libtiff-dev libacl1-dev libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev libmagickcore-dev libmagick++-dev libgpm-dev libselinux1-dev libm17n-dev libotf-dev libsystemd-dev libtool-bin pandoc texlive-latex-recommended texlive-extra-utils texlive-latex-extra cmake cmake-extras html2ps groff xhtml2ps

sudo apt-get build-dep emacs

#+end_src
*** configuration
#+begin_src sh
./configure --disable-silent-rules \
--with-modules --with-file-notification=inotify --with-mailutils \
--with-x=yes --with-x-toolkit=gtk3 --with-xwidgets --with-lcms2 \
--with-imagemagick --with-xml2 --with-json --with-harfbuzz CFLAGS='-O3'
#+end_src
*** building
#+begin_src sh
make
sudo make install
#+end_src
*** default sys-cfg from ubuntu emacs 26
#+begin_src sh
system-configuration-options
"--build x86_64-linux-gnu --prefix=/usr --sharedstatedir=/var/lib --libexecdir=/usr/lib --localstatedir=/var/lib --infodir=/usr/share/info --mandir=/usr/share/man --enable-libsystemd --with-pop=yes --enable-locallisppath=/etc/emacs:/usr/local/share/emacs/26.3/site-lisp:/usr/local/share/emacs/site-lisp:/usr/share/emacs/26.3/site-lisp:/usr/share/emacs/site-lisp --with-sound=alsa --without-gconf --with-mailutils --build x86_64-linux-gnu --prefix=/usr --sharedstatedir=/var/lib --libexecdir=/usr/lib --localstatedir=/var/lib --infodir=/usr/share/info --mandir=/usr/share/man --enable-libsystemd --with-pop=yes --enable-locallisppath=/etc/emacs:/usr/local/share/emacs/26.3/site-lisp:/usr/local/share/emacs/site-lisp:/usr/share/emacs/26.3/site-lisp:/usr/share/emacs/site-lisp --with-sound=alsa --without-gconf --with-mailutils --with-x=yes --with-x-toolkit=gtk3 --with-toolkit-scroll-bars 'CFLAGS=-g -O2 -fdebug-prefix-map=/build/emacs-mEZBk7/emacs-26.3+1=. -fstack-protector-strong -Wformat -Werror=format-security -Wall' 'CPPFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2' 'LDFLAGS=-Wl,-Bsymbolic-functions -Wl,-z,relro'"

system-configuration-features
"XPM JPEG TIFF GIF PNG RSVG IMAGEMAGICK SOUND GPM DBUS GSETTINGS GLIB NOTIFY ACL LIBSELINUX GNUTLS LIBXML2 FREETYPE M17N_FLT LIBOTF XFT ZLIB TOOLKIT_SCROLL_BARS GTK3 X11 XDBE XIM THREADS LIBSYSTEMD LCMS2"
#+end_src
*** desired sys-cfg for emacs 27.1
#+begin_src sh
system-configuration-options
"--disable-silent-rules --with-modules --with-file-notification=inotify --with-mailutils --with-x=yes --with-x-toolkit=gtk3 --with-xwidgets --with-lcms2 --with-imagemagick"

system-configuration-features
"XPM JPEG TIFF GIF PNG RSVG IMAGEMAGICK SOUND GPM DBUS GSETTINGS GLIB NOTIFY INOTIFY ACL LIBSELINUX GNUTLS LIBXML2 FREETYPE HARFBUZZ M17N_FLT LIBOTF XFT ZLIB TOOLKIT_SCROLL_BARS GTK3 X11 XDBE XIM MODULES THREADS XWIDGETS LIBSYSTEMD PDUMPER LCMS2 GMP"
#+end_src
** Emacs Packages
M-x package-refresh-contents
;; themes
M-x package-install RET modus-operandi
M-x package-install RET modus-vivendi
M-x package-install RET spacemacs-theme
M-x package-install RET plan9-theme
M-x package-install RET acme
;; utils
M-x package-install RET pdf-tools
M-x vterm
M-x package-install RET restart-emacs
M-x pdf-tools-install
M-x irony-install-server
* QoL section
Minor quality-of-life modifications for a more pleasant Emacs experience.
** Enable line numbers
Emacs breaks certain modes when it has line-numbers-mode enabled, (like docview or ansi-term) so we utilize the approach of only enabling it on some major modes rather than globally.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
#+END_SRC
** Enable column numbers
Show column number in modeline.
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC
** Show parent parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Disable the default startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+END_SRC
** Disable most gui elements
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Enable tabs
#+BEGIN_SRC emacs-lisp
;;(tab-bar-mode 1)
#+END_SRC
** Enable copypasting outside of Emacs
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC
** Disable automatic creation of backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** Enable conservative scrolling
#+BEGIN_SRC emacs-lisp
  ;;(setq scroll-conservatively 100)
  (setq scroll-conservatively 1)
  (setq mouse-wheel-scroll-amount '(1))
  (setq mouse-wheel-progressive-speed nil)
#+END_SRC
** Disable ring-bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
  (setq c-basic-offset tab-width)
  (setq-default electric-indent-inhibit t)
  (setq-default indent-tabs-mode t)
  (setq backward-delete-char-untabify-method 'nil)
#+END_SRC
** Enable prettify symbols mode
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
** Enable bracket pair-matching
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC
** Creating a new window switches your cursor to it
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
	(interactive)
	(split-window-below)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
	(interactive)
	(split-window-right)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Transform yes-or-no questions into y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Easier resize bindigs
Super - Control - <arrow>
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-C-<down>") 'shrink-window)
  (global-set-key (kbd "s-C-<up>") 'enlarge-window)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Defer loading most packages for quicker startup times
#+BEGIN_SRC emacs-lisp
(setq use-package-always-defer t)
#+END_SRC
** Mouse Move
#+begin_src emacs-lisp
(defun warp-mouse-to-current-window ()
  (interactive)
  (destructuring-bind (left top right bottom)
      (window-edges)
    (set-mouse-position (selected-frame) left top)))
#+end_src
** Theme
#+BEGIN_SRC emacs-lisp
;; Font and frame size
;;(set-face-font 'default "Monaco")
#+END_SRC
* Personal Keybinds
** Keybinds
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f9>") 'tab-bar-mode)
(global-set-key (kbd "<f5>") 'revert-buffer)
(global-set-key (kbd "<f6>") 'menu-bar-mode)
(global-set-key (kbd "<f7>") 'scroll-bar-mode)
(global-set-key (kbd "<f8>") 'tool-bar-mode)
(global-set-key (kbd "<f12>") 'linum-mode)
(global-set-key (kbd "<f10>") 'compile)
(global-set-key (kbd "C-x w") 'elfeed)
#+END_SRC
** Swap windows
C-x x swaps windows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x x") 'window-swap-states)
#+END_SRC
* =Org= mode
** Description
Sensible and well-defined org-mode defaults.
and
Getting things done via org-capture;
https://www.labri.fr/perso/nrougier/GTD/index.html
** Code
#+BEGIN_SRC emacs-lisp
  ;; Org init
  (use-package org
    :config
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook
              '(lambda ()
                 (visual-line-mode 1)))
	(setq org-display-inline-images t)
	(setq org-redisplay-inline-images t)
	(setq org-startup-with-inline-images "inlineimages")
	(setq org-directory "~/org")
    (setq org-agenda-files (list "inbox.org"))
	(global-set-key (kbd "C-<f1>") (lambda()
								 (interactive)
								 (show-all))))

  ;; Misc
  (use-package org-indent
    :diminish org-indent-mode)

  (use-package org-bullets
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package htmlize
    :ensure t)

(org-babel-do-load-languages 'org-babel-load-languages
    '(
        (shell . t)
    )
)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(require 'org)

;;(setq org-directory "~/org")
(setq org-agenda-files (list "inbox.org"))
;;(setq org-default-notes-file (concat org-directory "/notes.org"))

(setq org-capture-templates
      '(("i" "Inbox" entry (file+headline "~/org/inbox.org" "Inbox")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")))

;; Use full window for org-capture
;;(add-hook 'org-capture-mode-hook 'delete-other-windows)

(define-key global-map (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c l") 'org-store-link)
;;(global-set-key (kbd "C-c C-l") 'org-insert-link)
#+END_SRC
* Eshell
** Description
Prettify eshell prompt.
** Prompt
#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-regexp "^[^αλ\n]*[αλ] ")
  (setq eshell-prompt-function
        (lambda nil
          (concat
           (if (string= (eshell/pwd) (getenv "HOME"))
               (propertize "~" 'face `(:foreground "#99CCFF"))
             (replace-regexp-in-string
              (getenv "HOME")
              (propertize "~" 'face `(:foreground "#99CCFF"))
              (propertize (eshell/pwd) 'face `(:foreground "#99CCFF"))))
           (if (= (user-uid) 0)
               (propertize " α " 'face `(:foreground "#FF6666"))
           (propertize " λ " 'face `(:foreground "#A6E22E"))))))

  (setq eshell-highlight-prompt nil)
#+END_SRC
** Aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'open 'find-file-other-window)
  (defalias 'clean 'eshell/clear-scrollback)
#+END_SRC
** Custom functions
*** Open files as root
#+BEGIN_SRC emacs-lisp
  (defun eshell/sudo-open (filename)
    "Open a file as root in Eshell."
    (let ((qual-filename (if (string-match "^/" filename)
                             filename
                           (concat (expand-file-name (eshell/pwd)) "/" filename))))
      (switch-to-buffer
       (find-file-noselect
        (concat "/sudo::" qual-filename)))))
#+END_SRC
*** Super - Control - RET to open eshell
#+BEGIN_SRC emacs-lisp
  (defun eshell-other-window ()
    "Create or visit an eshell buffer."
    (interactive)
    (if (not (get-buffer "*eshell*"))
        (progn
          (split-window-sensibly (selected-window))
          (other-window 1)
          (eshell))
      (switch-to-buffer-other-window "*eshell*")))

  (global-set-key (kbd "<s-C-return>") 'eshell-other-window)
#+END_SRC
* Use-package
** Initialize =auto-package-update=
*** Description
Auto-package-update automatically updates and removes old packages.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :defer nil
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
** Initialize =diminish=
*** Description
Diminish hides minor modes to prevent cluttering your mode line.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC
** Initialize =spaceline=
*** Description
Spaceline.
*** Code
#+BEGIN_SRC emacs-lisp
;;  (use-package spaceline
;;    :ensure t)
#+END_SRC
** Initialize =powerline= 
*** Description
We utilize the spaceline theme for powerline.
*** Code
#+BEGIN_SRC emacs-lisp
;;  (use-package powerline
;;	:ensure t
;;	:init
;;	(spaceline-spacemacs-theme)
;;	:hook
;;	('after-init-hook) . 'powerline-reset)
#+END_SRC
** Initialize =dashboard=
*** Description
Pretty emacs logo at startup.
*** Code
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :defer nil
  :preface
  ;;(defun update-config ()
  ;;  "Update Emacs to the latest version."
  ;;  (interactive)
  ;;  (let ((dir (expand-file-name user-emacs-directory)))
  ;;    (if (file-exists-p dir)
  ;;        (progn
  ;;          (message "emacs is updating!")
  ;;          (cd dir)
  ;;          (shell-command "git pull")
  ;;          (message "Update finished. Switch to the messages buffer to see changes and then restart Emacs"))
  ;;      (message "\"%s\" doesn't exist." dir))))

  (defun create-scratch-buffer ()
    "Create a scratch buffer"
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents . 5)))
  (setq dashboard-banner-logo-title "Welcome to Emacs!")
  (setq dashboard-startup-banner "~/.emacs.d/img/emacs.png")
  (setq dashboard-center-content t)
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-set-init-info t)
  (setq dashboard-init-info (format "%d packages loaded in %s"
                                    (length package-activated-list) (emacs-init-time)))
  (setq dashboard-set-footer nil)
  (setq dashboard-set-navigator t)
  (setq dashboard-navigator-buttons
        `(((,nil
            "Open scratch buffer"
            "Switch to the scratch buffer"
            (lambda (&rest _) (create-scratch-buffer))
            'default)
           (nil
            "Open config.org"
            "Open Emacs configuration file for easy editing"
            (lambda (&rest _) (find-file "~/Dropbox/emacs/config.org"))
            'default)))))
#+END_SRC
** Initialize =which-key=
*** Description
Possible completion framework with 1s delay.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :init
    (which-key-mode)
    :config
    (setq which-key-idle-delay 0.3))
#+END_SRC
** Initialize =swiper=
*** Description
C-s to spawn a search minibuffer that can be traversed via C-n and C-p & <RET>.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package swiper
	:ensure t
	:bind ("C-s" . 'swiper))
#+END_SRC
** Initialize =evil=
*** Description
Heresy; Vim keybindings in Emacs. 
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :defer nil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))

  ;(use-package evil-collection
  ;  :after evil
  ;  :ensure t
  ;  :config
  ;  (evil-collection-init))
#+END_SRC
** Initialize =beacon=
*** Description
Briefly highlight the cursor position when switching to a new window or buffer.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon-mode
    :init
    (beacon-mode 1))
#+END_SRC
** Initialize =avy=
*** Description
M - s to jump to desired character.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package avy
	:ensure t
	:bind
	("M-s" . avy-goto-char))
#+END_SRC
** Initialize =switch-window=
*** Description
C-x o and pick window. (a,s,d...)
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
	:ensure t
	:config
	(setq switch-window-input-style 'minibuffer)
	(setq switch-window-increase 4)
	(setq switch-window-threshold 2)
	(setq switch-window-shortcut-style 'qwerty)
	(setq switch-window-qwerty-shortcuts
		  '("a" "s" "d" "f" "j" "k" "l"))
	:bind
	([remap other-window] . switch-window))
#+END_SRC
** Initialize =ido=
*** Description
Better switching & killing buffers in Emacs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :init
    (ido-mode 1)
    :config
    (setq ido-enable-flex-matching nil)
    (setq ido-create-new-buffer 'always)
    (setq ido-everywhere t))

  (use-package ido-grid-mode
    :ensure t
    :init
    (ido-grid-mode 1))
  ; This enables arrow keys to select while in ido mode. If you want to
  ; instead use the default Emacs keybindings, change it to
  ; "'C-n-and-C-p-only"
  ;(setq ido-grid-define-keys 'C-n-C-p-up-and-down)
#+END_SRC
** Initialize =async=
*** Description
Utilize asynchronous processes whenever possible.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package async
	:ensure t
	:init
	(dired-async-mode 1))
#+END_SRC
** Initialize =page-break-lines=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :diminish (page-break-lines-mode visual-line-mode))
#+END_SRC
** Initialize =undo-tree=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode)
#+END_SRC
** Initialize =treemacs=
*** Description
Neat side-bar file and project explorer.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         30)
      (treemacs-resize-icons 11)
	
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
      :ensure t)

    (use-package treemacs-icons-dired
      :after treemacs dired
      :ensure t
      :config (treemacs-icons-dired-mode))
#+END_SRC
** Initialize =magit=
*** Description
Git porcelain for Emacs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
** Initialize =elfeed=
*** Description
RSS reader for Emacs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t

    :config
		(setq elfeed-feeds
      '(("https://www.archlinux.org/feeds/news/" linux distro)
        ("https://www.gnome.org/feed/" gnu de)
        ("https://planet.emacslife.com/atom.xml" emacs community)
        ("https://www.ecb.europa.eu/rss/press.html" economics eu)
        ("http://feed.pippa.io/public/shows/teamhuman" podcast culture)
		  ("https://news.ycombinator.com/rss" ycombinator news)
		  ("https://www.phoronix.com/rss.php" phoronix))))
#+END_SRC
** Initialize =pdf-tools=
*** Description
Better pdf viewing experience.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :defer t
    :commands (pdf-view-mode pdf-tools-install)
    :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
    :load-path "site-lisp/pdf-tools/lisp"
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install)
    (define-pdf-cache-function pagelabels)
    :hook ((pdf-view-mode-hook . (lambda () (display-line-numbers-mode -1)))
    (pdf-view-mode-hook . pdf-tools-enable-minor-modes)))

  (use-package pdf-view-restore
    :after pdf-tools
    :config
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))

  (use-package org-pdftools
    :hook (org-load-hook . org-pdftools-setup-link))
#+END_SRC

#+RESULTS:
| org-pdftools-setup-link |

** Initialize =vterm=
*** Description
Fully fledged terminal.
*** Code
#+begin_src emacs-lisp
  (use-package vterm
	  :ensure t)
#+end_src
** Initialize =saveplace=
*** Description
Saves cursor location in buffers.
*** Code
#+begin_src emacs-lisp
  (use-package saveplace
	  :defer nil
    :config
    (save-place-mode))
#+end_src
** Initialize =rainbow-delimiters=
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
;;(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src
** Initialize =ivy-swiper-counsel=
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
** Built-in entry: =eldoc=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+END_SRC
** Built-in entry: =abbrev=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :diminish abbrev-mode)
#+END_SRC
* Languages
** Initialize =company=
*** Description
Company is the autocompletion frontend that takes all the backends and gives you possible autocompletions when writing programs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish (company-mode irony-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort)
    :hook
    ((c-mode c++-mode) . company-mode))
#+END_SRC
** Initialize =yasnippet=
*** Description
Yasnippet provides useful snippets.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :hook
    ((c-mode c++-mode) . yas-minor-mode)
    :config
    (yas-reload-all))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
** C & C++
*** Description
Irony is the company backend for C and C++
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :defer nil
    :ensure t)

  (use-package company-irony
    :defer nil
    :ensure t
    :config
    (setq company-backends '((company-c-headers
                              company-dabbrev-code
                              company-irony))))
  (use-package irony
    :defer nil
    :ensure t
    :config
    :hook
    ((c++-mode c-mode) . irony-mode)
    ('irony-mode-hook) . 'irony-cdb-autosetup-compile-options)
#+END_SRC
** Common Lisp
*** Description
SLIME.
Common Lisp REPL.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :defer nil
    :config
    (setq inferior-lisp-program "sbcl")
    (setq slime-contribs '(slime-fancy)))
#+END_SRC
** Scheme Lisp
*** Description
Geiser.
Scheme Lisp REPL.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t
    :defer nil
    :config
    (setq geiser-active-implementations '(mit)))

  (defun geiser-save ()
    (interactive)
    (geiser-repl--write-input-ring))
	#+end_src
* Browser
#+begin_src emacs-lisp
  ;; (defun shr-custom-url (&optional external mouse-event)
  ;;   (interactive (list current-prefix-arg last-nonmenu-event))
  ;;   (mouse-set-point mouse-event)
  ;;   (let ((url (get-text-property (point) 'shr-url)))
  ;;     (if	(not url)
  ;; 	(message "No link under point")
  ;;       (fakebrowser url))))
  ;; (add-hook 'eww-mode-hook
  ;; 	  '(lambda ()
  ;; 	     (setq-local mouse-1-click-follows-link nil)
  ;; 	     (define-key eww-link-keymap [mouse-2] 'shr-custom-url)
  ;; 	     (define-key eww-link-keymap [mouse-1] 'eww-follow-link)))

  ;; (defun fakebrowser (link &optional new-window)
  ;;   (interactive)
  ;;   (pcase link
  ;;     ((pred (lambda (x) (string-match-p "\\.\\(png\\|jpg\\|jpeg\\|jpe\\)$" x)))
  ;;      (start-process "feh" nil "feh" "-x" "-." "-Z" link))
  ;;     ((pred (lambda (x) (string-match-p "i\\.redd\\.it\\|twimg\\.com" x)))
  ;;      (start-process "feh" nil "feh" "-x" "-." "-Z" link))
  ;;     ((pred (lambda (x) (string-match-p "\\.\\(mkv\\|mp4\\|gif\\|webm\\|gifv\\)$" x)))
  ;;      (start-process "mpv" nil "mpv" link))
  ;;     ((pred (lambda (x) (string-match-p "v\\.redd\\.it\\|gfycat\\.com\\|streamable\\.com" x)))
  ;;      (start-process "mpv" nil "mpv" link))
  ;;     ((pred (lambda (x) (string-match-p "youtube\\.com\\|youtu\\.be\\|vimeo\\.com\\|liveleak\\.com" x)))
  ;;      (mpv-enqueue-play link))
  ;;     (_ (start-process "firefox" nil "firefox" link))))
  ;;
  ;; (setq browse-url-browser-function 'fakebrowser
  ;;       shr-external-browser 'browse-url-browser-function)
#+end_src
#+BEGIN_SRC emacs-lisp
;;(setq browse-url-browser-function 'eww-browse-url)

;; use browser depending on url
(setq
 browse-url-browser-function
 '(
  ("wikipedia\\.org" . browse-url-firefox)
  ("github" . browse-url-firefox)
  ("khanacademy" . browse-url-chromium)
  ("reddit" . browse-url-chromium)
  ("thefreedictionary\\.com" . eww-browse-url)
  ("." . browse-url-default-browser)
  ))
#+END_SRC
