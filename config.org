#+STARTUP: overview
#+TITLE: Emacs Configuration
#+AUTHOR: Diamond Bond
#+DESCRIPTION: Eight Megabytes And Constantly Swapping
#+LANGUAGE: en
#+OPTIONS: num:nil

* Core
Minor quality-of-life modifications for a more pleasant Emacs experience.
** Rudimentary
#+begin_src emacs-lisp
  ;;; config.el -*- lexical-binding: t; -*-
#+end_src
** Identity
#+begin_src emacs-lisp
  (setq user-full-name "Diamond"
		user-mail-address "diamondbond1@gmail.com")
#+end_src
** Auth
#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo" "~/.authinfo.gpg")
		auth-source-cache-expiry nil)
#+end_src
** Performance
#+begin_src emacs-lisp
  ;; Do not steal focus while doing async compilations
  (setq warning-suppress-types '((comp)))

  ;; Turn off ad-redef warnings
  (setq ad-redefinition-action 'accept)

  ;; Potentially speed up cursor operations
  ;; https://emacs.stackexchange.com/questions/28736
  (setq auto-window-vscroll nil)
#+end_src
** Garbage collect when in minibuffer
#+begin_src emacs-lisp
  ;; While the minibuffer is open, garbage collection will never occur,
  ;; but once we make a selection, or cancel,
  ;; garbage collection will kick off immediately
  ;; and then revert back to the default, sensible behavior.
  (defun my-minibuffer-setup-hook ()
	(setq gc-cons-threshold most-positive-fixnum))

  (defun my-minibuffer-exit-hook ()
	(setq gc-cons-threshold gc-cons-threshold-original))

  (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)
#+end_src
** Configure Scrolling
#+begin_src emacs-lisp
  ;; Precision pixel scrolling
  ;; (DEPENDS: Emacs@HEAD=29+)
  ;; (pixel-scroll-precision-mode)

  ;; Enables nice scrolling for Emacs<=28.1
  (setq scroll-margin 0)
  (setq scroll-conservatively 100000)
  (setq scroll-preserve-screen-position 1)
#+end_src
** Disable automatic creation of backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
  (setq vc-make-backup-files nil)
#+END_SRC
** Don't ask for confirmation when opening symlinked file
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
** Do not litter init.el
#+begin_src emacs-lisp
  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file) ; Don’t forget to load it, we still need it
	(load custom-file))
#+end_src
** Load newer .elc or .el
#+begin_src emacs-lisp
  ;; Load the newer .elc or .el file, rather than stopping at .elc.
  (setq load-prefer-newer t)
#+end_src
** UTF-8
#+begin_src emacs-lisp
  ;; UTF-8 please
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
** Indentation
Set tabs & indents to 4sp.
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
  (setq c-basic-offset tab-width)
  (setq-default electric-indent-inhibit t)
  (setq-default indent-tabs-mode t)
  (setq backward-delete-char-untabify-method 'nil)
#+END_SRC
** Fill whatever space the window manager has given us.
#+begin_src emacs-lisp
  (setq window-resize-pixelwise t)
  (setq frame-resize-pixelwise t)
#+end_src
** Fringe mode
#+begin_src emacs-lisp
  (fringe-mode nil)
  (setq-default fringes-outside-margins nil)
  (setq-default indicate-buffer-boundaries nil)
  (setq-default indicate-empty-lines nil)
  (setq-default overflow-newline-into-fringe t)
#+end_src
** Window title
#+BEGIN_SRC emacs-lisp
  (setq-default frame-title-format '("" "%b"))
#+END_SRC
** Window frame
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(internal-border-width . 0))
#+end_src
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Enable line numbers
Emacs breaks certain modes when it has line-numbers-mode enabled, (like docview or ansi-term) so we utilize the approach of only enabling it on some major modes rather than globally.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
#+END_SRC
** Enable column numbers
Show column number in modeline.
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC
** Set font
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-12"))
#+end_src
** Disable the default startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+END_SRC
** Disable most gui elements
#+BEGIN_SRC emacs-lisp
  ;;(tool-bar-mode -1)
  (menu-bar-mode 1)
  (scroll-bar-mode 1)
  (set-scroll-bar-mode 'right) ;; For x-toolkit=athena
#+END_SRC
** Enable copy-pasting outside of Emacs
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
  (setq save-interprogram-paste-before-kill t)
#+END_SRC
** Disable ring-bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Enable prettify symbols mode
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
** Show parent parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Enable bracket pair-matching
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '((?\{ . ?\})
							  (?\( . ?\))
							  (?\[ . ?\])
							  (?\" . ?\")))
  (electric-pair-mode t)
#+END_SRC
** Transform yes-or-no questions into y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Easier resize bindigs
Super - Control - <arrow>
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-C-<down>") 'shrink-window)
  (global-set-key (kbd "s-C-<up>") 'enlarge-window)
#+END_SRC
** Supress *Async Shell Command* output
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist '("*Async Shell Command*" display-buffer-no-window (nil)))
#+end_src
** Proced
#+begin_src emacs-lisp
  (setq proced-auto-update-flag t)
  (setq proced-auto-update-interval 5)
  (setq proced-descend t)
  (setq proced-filter 'user)
#+end_src
** Browser
#+BEGIN_SRC emacs-lisp
  ;; always use eww
  (setq browse-url-default-browser 'eww-browse-url)
  (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC
** Define aliases
#+begin_src emacs-lisp
  (defalias 'first 'car)
  (defalias 'second 'cadr)
  (defalias 'third 'caddr)
  (defalias 'when-not 'unless)

  ;; such a destructive command should not have a similar name
  (defalias 'bookmark-delete-all 'bookmark-delete)
#+end_src
** Set environment
Essential for using shells in Emacs.
#+begin_src emacs-lisp
  (setenv "PAGER" "cat")
  (setq default-directory "~/")
#+end_src
* Keybinds
** Description
Global & private key maps.
** Code
#+begin_src emacs-lisp
  ;;---------------------------------------------------------------------
  ;; private-map
  ;;---------------------------------------------------------------------

  (define-prefix-command 'z-map)
  (global-set-key (kbd "C-1") 'z-map) ;; Ctrl-1

  (define-key z-map (kbd "a") 'org-agenda)
  (define-key z-map (kbd "f") 'find-file-other-frame)
  (define-key z-map (kbd "D") 'dashboard-refresh-buffer)
  (define-key z-map (kbd "d") 'dired-other-frame)
  (define-key z-map (kbd "g") 'org-mark-ring-goto)
  (define-key z-map (kbd "G") 'org-mark-ring-goto)
  (define-key z-map (kbd "2") 'make-frame-command)
  (define-key z-map (kbd "o") 'olivetti-mode)
  (define-key z-map (kbd "m") 'magit-status)
  (define-key z-map (kbd "v") 'vterm)

  (define-key z-map (kbd "b") 'display-battery-mode)
  (define-key z-map (kbd "t") 'display-time-mode)

  (define-key z-map (kbd "*") 'quick-calc)
  (define-key z-map (kbd "O") 'org-redisplay-inline-images)
  (define-key z-map (kbd "s") 'ispell-word)
  (define-key z-map (kbd "W") 'elfeed)
  (define-key z-map (kbd "w") 'eww)
  (define-key z-map (kbd "F") 'follow-mode)

  (define-key z-map (kbd "x") 'switch-to-buffer-other-frame)
  (define-key z-map (kbd "k") 'compile)
  (define-key z-map (kbd "e") 'eval-region)

  (define-key z-map (kbd "S") 'speedbar-frame-mode)
  (define-key z-map (kbd "y") 'yas-minor-mode)
  (define-key z-map (kbd "i") 'consult-imenu)
  (define-key z-map (kbd "I") 'imenu-list)
  (define-key z-map (kbd "9") 'switch-to-qemu-and-run)
  (define-key z-map (kbd "0") 'switch-to-qemu-and-paste)

  (define-key z-map (kbd "C-c") 'calendar)
  (define-key z-map (kbd ".") 'org-date-from-calendar)

  (define-key z-map (kbd "n") (lambda () (interactive) (find-file "~/org/notes.org")))
  (define-key z-map (kbd "c") (lambda () (interactive) (find-file "~/.emacs.d/config.org")))

  ;;---------------------------------------------------------------------
  ;; global-map
  ;;---------------------------------------------------------------------

  (global-set-key (kbd "<f9>") 'tab-bar-mode)
  (global-set-key (kbd "S-<f9>") 'tab-line-mode)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "<f6>") 'menu-bar-mode)
  (global-set-key (kbd "<f7>") 'scroll-bar-mode)
  (global-set-key (kbd "<f8>") 'tool-bar-mode)
  (global-set-key (kbd "<f12>") 'linum-mode)
  (global-set-key (kbd "<f10>") 'compile)
  (global-set-key (kbd "C-x w") 'elfeed)
  (global-set-key (kbd "C-x x") 'window-swap-states)
  (global-set-key (kbd "<s-C-return>") 'eshell-other-window)
  (define-key global-map (kbd "C-S-n") #'next-15-lines)
  (define-key global-map (kbd "C-S-p") #'previous-15-lines)
#+END_SRC
* Use-package
** Initialize =alert=
*** Description
Alert is a Growl-workalike for Emacs which uses a common notification interface and multiple, selectable "styles", whose use is fully customizable by the user.
*** Code
#+begin_src emacs-lisp
  (use-package alert :ensure t)
#+end_src
** Initialize =org=
*** Description
Sensible and well-defined org-mode configuration with org-capture support.
Org-tree-slider included for presentation support.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package org
	:ensure t
	:config
	(setq org-directory "~/org"
		  initial-major-mode 'org-mode
		  org-display-inline-images t
		  org-redisplay-inline-images t
		  org-startup-with-inline-images "inlineimages"
		  org-pretty-entitles t
		  org-agenda-files (list "~/org/inbox.org"
								 "~/org/notes.org"
								 "~/org/daily.org"
								 "~/org/birthdays.org")
		  org-image-actual-width nil
		  +org-export-directory "~/org/export"
		  org-default-notes-file "~/org/inbox.org"
		  org-id-locations-file "~/org/.orgids"
		  org-catch-invisible-edits 'smart)

	(setq org-todo-keywords
		  '((sequence "TODO"
					  "MAYBE"
					  "NEXT"
					  "STARTED"
					  "WAITING"
					  "PR"
					  "|"
					  "DONE"
					  "DEFERRED"
					  "CANCELLED"
					  "DELEGATED")))

	(setq org-babel-load-languages
		  '((awk        . t)
			(calc       . t)
			(css        . t)
			(emacs-lisp . t)
			(gnuplot    . t)
			(haskell    . t)
			(js         . t)
			(lisp       . t)
			(org        . t)
			(python     . t)
			(scheme     . t)
			(shell      . t)
			(C          . t)
			(ein        . t)
			(sql        . t)))

	(org-babel-do-load-languages 'org-babel-load-languages
								 '((shell . t)))

	;; org templates
	(setq org-capture-templates
		  '(("i" "Inbox" entry (file+headline "~/org/inbox.org" "Inbox")
			 "* %?\n%a\nEntered on %U")
			("j" "Journal" entry (file+datetree "~/org/journal.org")
			 "* %?\n%a\nEntered on %U")))

	:bind
	("C-c c" . 'org-capture)
	("C-c l" . 'org-store-link)
	("C-<f1>" . (lambda()(interactive)(show-all)))
	:hook (org-mode . visual-line-mode))

  ;; for reminders
  (use-package org-wild-notifier
	:ensure t
	:after org
	:custom
	(alert-default-style 'notifications)
	(org-wild-notifier-alert-time '(1 10 15 30))
	(org-wild-notifier-keyword-whitelist nil)
	(org-wild-notifier-notification-title "*reminder*")
	:config
	(org-wild-notifier-mode 1))

  ;; for presentations
  (use-package org-tree-slide
	:ensure t
	:custom
	(org-tree-slide-slide-in-effect t)
	(org-tree-slide-activate-message "Presentation started!")
	(org-tree-slide-deactivate-message "Presentation finished!")
	(org-tree-slide-header t)
	(org-tree-slide-breadcrumbs " > ")
	(org-image-actual-width nil))
#+end_src
** Initialize =dashboard=
*** Description
An extensible emacs startup screen.
Hardcoded in three buffers that I frequently visit along with helper functions.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
	:ensure t
	:defer nil
	:diminish dashboard-mode
	:preface
	(defun init-edit ()
	  "Edit initialization file"
	  (interactive)
	  (find-file "~/.emacs.d/init.el"))
	(defun notes-edit ()
	  "Edit notes file"
	  (interactive)
	  (find-file "~/org/notes.org"))
	(defun config-edit ()
	  "Edit configuration file"
	  (interactive)
	  (find-file "~/.emacs.d/config.org"))
	(defun create-scratch-buffer ()
	  "Create a scratch buffer"
	  (interactive)
	  (switch-to-buffer (get-buffer-create "*scratch*"))
	  (lisp-interaction-mode))
	:config
	(dashboard-setup-startup-hook)
	(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
	(setq dashboard-items '((recents . 5)))
	(setq dashboard-startup-banner (expand-file-name "img/gnusstorm-2.gif" user-emacs-directory))
	(setq dashboard-center-content t)
	(setq dashboard-show-shortcuts nil)
	(setq dashboard-set-init-info t)
	(setq dashboard-set-footer nil)
	(setq dashboard-set-navigator t)
	(setq dashboard-navigator-buttons
		  `(((,nil
			  "Scratch"
			  "Switch to the scratch buffer"
			  (lambda (&rest _) (create-scratch-buffer))
			  'default)
			 (nil
			  "Notes"
			  "Open personal notes"
			  (lambda (&rest _) (notes-edit))
			  'default)
			 (nil
			  "Config"
			  "Open Emacs configuration"
			  (lambda (&rest _) (config-edit))
			  'default)))))
#+END_SRC
** Initialize =elisp-enhancers=
*** Description
Elisp sweetening.
*** Code
#+begin_src emacs-lisp
  (use-package fn      :demand t) ; function
  (use-package s       :demand t) ; string
  (use-package f       :demand t) ; file
  (use-package ht      :demand t) ; hash table
  (use-package dash    :demand t) ; list
  (use-package a       :demand t) ; assoc lists
  (use-package async   :demand t) ; async
  (use-package ts      :demand t) ; timestamps
  (use-package pcre2el :demand t) ; sane regex
#+end_src
** Initialize =corfu=
*** Description
Completion Overlay Region FUnction - Corfu enhances completion at point with a small completion popup. The current candidates are shown in a popup below or above the point. Corfu is the minimalistic completion-in-region counterpart of the Vertico minibuffer UI.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package corfu
	:straight t
	:ensure t
	:custom
	(corfu-auto t)
	(corfu-auto-prefix 3)
	(corfu-auto-delay 0)
	(corfu-echo-documentation 0)
	(corfu-quit-no-match 'separator)
	(corfu-preview-current nil)
	(define-key corfu-map (kbd "<escape>") #'corfu-quit)
	(define-key corfu-map (kbd "C-h") #'corfu-show-documentation)
	(define-key corfu-map (kbd "RET") nil)
	:init (global-corfu-mode)
	:config
	;; Adapted from Corfu's manual.
	(defun contrib/corfu-enable-always-in-minibuffer ()
	  "Enable Corfu in the minibuffer if Vertico is not active.
  Useful for prompts such as `eval-expression' and `shell-command'."
	  (unless (bound-and-true-p vertico--input)
		(corfu-mode 1)))

	(add-hook 'minibuffer-setup-hook #'contrib/corfu-enable-always-in-minibuffer 1))
#+END_SRC
** Initialize =cape=
*** Description
Completio at point extensions.
*** Code
#+begin_src emacs-lisp
  (use-package cape
	:ensure t
	:config
	(setq cape-dabbrev-min-length 3)
	(dolist (backend '( cape-symbol cape-keyword cape-file cape-dabbrev))
	  (add-to-list 'completion-at-point-functions backend)))
#+end_src
** Initialize =vertico-&-friends=
*** Description
Vertico, orderless, marginalia, consult & embark.
*** Code
#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
	:straight t
	:ensure t
	:bind (:map vertico-map
				("C-j" . vertico-next)
				("C-k" . vertico-previous)
				("M-j" . vertico-next)
				("M-k" . vertico-previous)
				("C-f" . vertico-exit)
				:map minibuffer-local-map
				("M-h" . backward-kill-word))
	:init
	(vertico-mode)
	;; Grow and shrink the Vertico minibuffer
	(setq vertico-resize t)
	;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
	(setq vertico-cycle t))

  ;; Configure directory extension.
  (use-package vertico-directory
	:straight nil
	:load-path "straight/repos/vertico/extensions"
	:after vertico
	:ensure nil
	:bind (:map vertico-map
				("RET" . vertico-directory-enter)
				("DEL" . vertico-directory-delete-char)
				("M-DEL" . vertico-directory-delete-word)))

  (use-package orderless
	:ensure t
	:init
	(setq completion-styles '(orderless basic)
		  completion-category-defaults nil
		  completion-category-overrides '((file (styles basic partial-completion)))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
	:ensure t
	:init
	(savehist-mode))

  ;; Information in the margins
  (use-package marginalia
	:ensure t
	:init
	(marginalia-mode))

  ;; Consult provides practical commands based on the Emacs completion function completing-read.
  (use-package consult
	:ensure t
	:bind
	(("M-y" . consult-yank-from-kill-ring)
	 ("C-x b" . consult-buffer)))

  ;; Emacs Mini-Buffer Actions Rooted in Keymaps
  (use-package embark
	:ensure t
	:bind
	(("C-." . embark-act)         ;; pick some comfortable binding
	 ("C-;" . embark-dwim)        ;; good alternative: M-.
	 ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
	:init
	;; Optionally replace the key help with a completing-read interface
	(setq prefix-help-command #'embark-prefix-help-command)
	:config
	;; Hide the mode line of the Embark live/completions buffers
	(add-to-list 'display-buffer-alist
				 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
				   nil
				   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
	:ensure t
	:after (embark consult)
	:demand t ; only necessary if you have the hook below
	;; if you want to have consult previews as you move around an
	;; auto-updating embark collect buffer
	:hook
	(embark-collect-mode . consult-preview-at-point-mode))

  ;; A few more useful configurations...
  (use-package emacs
	:init
	;; Add prompt indicator to `completing-read-multiple'.
	;; Alternatively try `consult-completing-read-multiple'.
	(defun crm-indicator (args)
	  (cons (concat "[CRM] " (car args)) (cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
		  '(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	;; Emacs 28: Hide commands in M-x which do not work in the current mode.
	;; Vertico commands are hidden in normal buffers.
	(setq read-extended-command-predicate
		  #'command-completion-default-include-p)

	;; Enable recursive minibuffers
	(setq enable-recursive-minibuffers t)

	;; Completion ignores case
	(setq completion-ignore-case t)
	(setq read-file-name-completion-ignore-case t)

	;; Allow Emacs to resize mini windows
	(setq resize-mini-windows t))
#+end_src
** Initialize =dabbrev=
*** Description
Expand the word in the buffer before point as a dynamic abbrev, by searching for words starting with that abbreviation ( dabbrev-expand ).
*** Code
#+begin_src emacs-lisp
  ;; Use dabbrev with Corfu!
  (use-package dabbrev
	:ensure t
	;; Swap M-/ and C-M-/
	:bind (("M-/" . dabbrev-completion)
		   ("C-M-/" . dabbrev-expand)))
#+end_src
** Initialize =all-the-icons=
*** Description
All the icons!
#+begin_src emacs-lisp
  (use-package all-the-icons
	:ensure t)

  (use-package all-the-icons-completion
	:after (marginalia all-the-icons)
	:hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
	:init
	(all-the-icons-completion-mode))
#+end_src
** Initialize =kind-icon=
*** Description
Kind icons.
*** Code
#+begin_src emacs-lisp
  (use-package kind-icon
	:ensure t
	:after corfu
	:custom
	(kind-icon-use-icons t)
	(kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
	(kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
	(kind-icon-blend-frac 0.08)
	:config
	(add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
** Initialize =which-key=
*** Description
Possible completion framework with 0.3s delay.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t
	:diminish which-key-mode
	:init
	(which-key-mode)
	:config
	(setq which-key-idle-delay 1.5))
#+END_SRC
** Initialize =yasnippet=
*** Description
Useful snippets.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
	:defer t
	:diminish yas-minor-mode
	:config
	(setq yas-snippet-dirs '("~/emacs.d/snippets/")
		  (yas-reload-all)))

  (use-package yasnippet-snippets
	:ensure t)

  (use-package auto-yasnippet
	:ensure t)
#+END_SRC
** Initialize =switch-window=
*** Description
C-x o and pick window (a,s,d...)
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
	:ensure t
	:config
	(setq switch-window-input-style 'minibuffer)
	(setq switch-window-increase 4)
	(setq switch-window-threshold 2)
	(setq switch-window-shortcut-style 'qwerty)
	(setq switch-window-qwerty-shortcuts
		  '("a" "s" "d" "f" "j" "k" "l"))
	:bind
	([remap other-window] . switch-window))
#+END_SRC
** Initialize =dired=
*** Description
Add icons and subtree's to dired.
*** Code
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
	:ensure t
	:diminish all-the-icons-dired-mode
	:config
	:hook (dired-mode . (lambda ()
						  (interactive)
						  (unless (file-remote-p default-directory)
							(all-the-icons-dired-mode)))))

  (use-package dired-subtree
	:ensure t
	:config
	(advice-add 'dired-subtree-toggle :after (lambda ()
											   (interactive)
											   (when all-the-icons-dired-mode
												 (revert-buffer)))))

  (defun xah/dired-sort ()
	"Sort dired dir listing in different ways.
  Prompt for a choice."
	(interactive)
	(let (sort-by arg)
	  (setq sort-by (completing-read "Sort by:" '("name" "size" "date" "extension")))
	  (pcase sort-by
		("name" (setq arg "-ahl --group-directories-first"))
		("date" (setq arg "-ahl -t --group-directories-first"))
		("size" (setq arg "-ahl -S --group-directories-first"))
		("extension" (setq arg "ahlD -X --group-directories-first"))
		(otherwise (error "Dired-sort: unknown option %s" otherwise)))
	  (dired-sort-other arg)))
#+end_src
** Initialize =evil=
*** Description
Heresy; Vim keybindings in Emacs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package evil
	:ensure t
	:defer nil
	:init
	(setq evil-want-keybinding nil)
	(setq evil-want-C-u-scroll t)
	:config
	(evil-mode 1)
	(setq evil-want-fine-undo t) ; more granular undo with evil
	(evil-set-initial-state 'messages-buffer-mode 'normal)
	(evil-set-initial-state 'dashboard-mode 'normal)
	(evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle))

  (use-package evil-collection
	:after evil
	:ensure t
	:config
	(evil-collection-init))
#+END_SRC
** Initialize =swiper=
*** Description
C-s to spawn a search minibuffer that can be traversed via C-n and C-p & <RET>.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package swiper
	:ensure t
	:bind ("C-s" . 'swiper))
#+END_SRC
** Initialize =avy=
*** Description
M-s to jump to desired character.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package avy
	:ensure t
	:bind
	("M-s" . avy-goto-char))
#+END_SRC
** Initialize =async=
*** Description
Utilize asynchronous processes whenever possible.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package async
	:ensure t
	:init
	(dired-async-mode 1)
	:config
	(async-bytecomp-package-mode 1))
#+END_SRC
** Initialize =page-break-lines=
*** Description
Global mode which displays form feed characters as tidy horizontal rules.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
	:ensure t
	:diminish (page-break-lines-mode visual-line-mode))
#+END_SRC
** Initialize =hydra=
*** Description
Hydra is a simple menu creator for keybindings.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package hydra
	:ensure t)

  (defhydra hydra-zoom ()
	"
	^Zoom^                 ^Other
	^^^^^^^--------------------------
	[_t_/_s_] zoom in/out  [_q_] quit
	[_0_]^^   reset zoom
	"
	("t" text-scale-increase "zoom in")
	("s" text-scale-decrease "zoom out")
	("0" text-scale-adjust "reset")
	("q" nil "finished" :exit t))

  (defhydra windows-adjust-size ()
	"
  ^Zoom^                                ^Other
  ^^^^^^^-----------------------------------------
  [_t_/_s_] shrink/enlarge vertically   [_q_] quit
  [_c_/_r_] shrink/enlarge horizontally
  "
	("q" nil :exit t)
	("c" shrink-window-horizontally)
	("t" enlarge-window)
	("s" shrink-window)
	("r" enlarge-window-horizontally))
#+END_SRC
** Initialize =treemacs=
*** Description
Tree layout file explorer.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
	:ensure t
	:defer t
	:init
	(with-eval-after-load 'winum
	  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
	:config
	(progn
	  (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
			treemacs-deferred-git-apply-delay      0.5
			treemacs-display-in-side-window        t
			treemacs-eldoc-display                 t
			treemacs-file-event-delay              5000
			treemacs-file-follow-delay             0.2
			treemacs-follow-after-init             t
			treemacs-git-command-pipe              ""
			treemacs-goto-tag-strategy             'refetch-index
			treemacs-indentation                   2
			treemacs-indentation-string            " "
			treemacs-is-never-other-window         nil
			treemacs-max-git-entries               5000
			treemacs-missing-project-action        'ask
			treemacs-no-png-images                 nil
			treemacs-no-delete-other-windows       t
			treemacs-project-follow-cleanup        nil
			treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
			treemacs-recenter-distance             0.1
			treemacs-recenter-after-file-follow    nil
			treemacs-recenter-after-tag-follow     nil
			treemacs-recenter-after-project-jump   'always
			treemacs-recenter-after-project-expand 'on-distance
			treemacs-show-cursor                   nil
			treemacs-show-hidden-files             t
			treemacs-silent-filewatch              nil
			treemacs-silent-refresh                nil
			treemacs-sorting                       'alphabetic-desc
			treemacs-space-between-root-nodes      t
			treemacs-tag-follow-cleanup            t
			treemacs-tag-follow-delay              1.5
			treemacs-width                         30)
	  (treemacs-resize-icons 11)

	  (treemacs-follow-mode t)
	  (treemacs-filewatch-mode t)
	  (treemacs-fringe-indicator-mode t)
	  (pcase (cons (not (null (executable-find "git")))
				   (not (null (executable-find "python3"))))
		(`(t . t)
		 (treemacs-git-mode 'deferred))
		(`(t . _)
		 (treemacs-git-mode 'simple))))
	:bind
	(:map global-map
		  ("M-0"       . treemacs-select-window)
		  ("C-x t 1"   . treemacs-delete-other-windows)
		  ("C-x t t"   . treemacs)
		  ("C-x t B"   . treemacs-bookmark)
		  ("C-x t C-t" . treemacs-find-file)
		  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
	:after treemacs evil
	:ensure t)

  (use-package treemacs-icons-dired
	:after treemacs dired
	:ensure t
	:config (treemacs-icons-dired-mode))
#+END_SRC
** Initialize =magit=
*** Description
The definitive Git porcelain for Emacs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package magit
	:ensure t)
#+END_SRC
** Initialize =autorevert=
*** Description
Diminish ARV from modeline.
*** Code
#+begin_src emacs-lisp
  (use-package autorevert
	:after magit
	:diminish auto-revert-mode)
#+end_src
** Initialize =elfeed=
*** Description
RSS reader for Emacs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
	:ensure t
	:config
	(setq elfeed-feeds
		  '(("https://www.archlinux.org/feeds/news/" archlinux)
			("https://www.gnome.org/feed/" gnome)
			("http://nullprogram.com/feed/" nullprog)
			("https://planet.emacslife.com/atom.xml" emacs community)
			("https://www.ecb.europa.eu/rss/press.html" economics eu)
			("https://drewdevault.com/blog/index.xml" drew devault)
			("https://news.ycombinator.com/rss" ycombinator news)
			("https://www.phoronix.com/rss.php" phoronix))))
#+END_SRC
** Initialize =pdf-tools=
*** Description
PDF Tools is, among other things, a replacement of DocView for PDF files. The key difference is that pages are not pre-rendered by e.g. ghostscript and stored in the file-system, but rather created on-demand and stored in memory.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
	:ensure t
	:defer nil
	:commands (pdf-view-mode pdf-tools-install)
	:mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
	:load-path "site-lisp/pdf-tools/lisp"
	:magic ("%PDF" . pdf-view-mode)
	:config
	(pdf-tools-install 'no-query)
	;; open pdfs scaled to fit page
	(setq-default pdf-view-display-size 'fit-page)
	;; automatically annotate highlights
	(setq pdf-annot-activate-created-annotations t)
	(define-pdf-cache-function pagelabels)
	:hook ((pdf-view-mode-hook . (lambda () (display-line-numbers-mode -1)))
		   (pdf-view-mode.hook . (lambda () (blink-cursor-mode -1)))
		   (pdf-view-mode-hook . pdf-tools-enable-minor-modes)))

  (use-package pdf-view-restore
	:after pdf-tools
	:ensure t
	:config
	:hook (pdf-view-mode . pdf-view-restore-mode))

  (use-package org-pdftools
	:after pdf-view-restore
	:ensure t
	:hook (org-load-hook . org-pdftools-setup-link))
#+END_SRC
** Initialize =nov=
*** Description
Major mode for reading EPUBs.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package nov
	:ensure t
	:defer nil
	:config
	(defun nov-font-setup ()
	  (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
							   :height 1.0)
	  (text-scale-increase 2))
	:mode ("\\.epub\\'" . nov-mode)
	:hook (nov-mode . nov-font-setup))
#+END_SRC
** Initialize =writegood=
*** Description
Minor mode to aid in finding common writing problems. Highlights text based on a set of weasel-words, passive-voice and duplicate words.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
	:ensure t)
#+END_SRC
** Initialize =synosaurus=
*** Description
Synosaurus is a thesaurus frontend for Emacs with pluggable backends.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package synosaurus
	:ensure t)
#+END_SRC
** Initialize =olivetti=
*** Description
Emacs minor mode for a nice writing environment.
*** Code
#+begin_src emacs-lisp
  (use-package olivetti
	:ensure t
	:defer nil
	:init
	(setq olivetti-body-width .75))
#+end_src
** Initialize =vterm=
*** Description
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm, a C library. As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and it can seamlessly handle large outputs.
*** Code
#+begin_src emacs-lisp
  (use-package vterm
	:ensure t
	:config
	(setq vterm-max-scrollback 10000))
#+end_src
** Initialize =saveplace=
*** Description
Saves cursor location in buffers.
*** Code
#+begin_src emacs-lisp
  (use-package saveplace
	:ensure t
	:defer nil
	:config
	(save-place-mode))
#+end_src
** Initialize =rainbow-delimiters=
*** Description
Rainbow-delimiters is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.
*** Code
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
	:ensure t
	:hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Initialize =notmuch=
*** Description
Email via notmuch and offlineimap as a sync backend.
*** Code
#+begin_src emacs-lisp
  (use-package notmuch
	:ensure t
	:commands (notmuch)
	:config
	(add-hook 'notmuch-hello-mode-hook
			  (lambda () (display-line-numbers-mode 0)))
	;; setup the mail address
	(setq mail-user-agent 'message-user-agent)

	;; smtp config
	(setq smtpmail-smtp-server "smtp.gmail.com"
		  message-send-mail-function 'message-smtpmail-send-it)

	;; report problems with the smtp server
	(setq smtpmail-debug-info t)
	;; add Cc and Bcc headers to the message buffer
	(setq message-default-mail-headers "Cc: \nBcc: \n")
	;; postponed message is put in the following draft directory
	(setq message-auto-save-directory "~/mail/draft")
	(setq message-kill-buffer-on-exit t)
	;; change the directory to store the sent mail
	(setq message-directory "~/mail/")

	;; Function to prune tag:deleted
	(defun prune-emails ()
	  "Delete old emails."
	  (interactive)
	  (async-shell-command "notmuch search --format=text0 --output=files tag:deleted | xargs -0 --no-run-if-empty rm"))

	;; Function to refresh local mail box from within emacs
	(defun notmuch-exec-offlineimap ()
	  "Execute offlineimap."
	  (interactive)
	  (set-process-sentinel
	   (start-process-shell-command "offlineimap"
									"*offlineimap*"
									"offlineimap -o")
	   #'(lambda (process event)
		   (notmuch-refresh-all-buffers)
		   (let ((w (get-buffer-window "*offlineimap*")))
			 (when w
			   (with-selected-window w (recenter (window-end))))))))

	(setq-default notmuch-saved-searches
				  (quote
				   ((:name "inbox" :query "(tag:inbox)" :sort-order newest-first :key "1")
					(:name "unread" :query "(tag:unread)" :sort-order newest-first :key "n")
					(:name "starred" :query "tag:flagged" :sort-order newest-first :key "f")
					(:name "sent" :query "(tag:sent OR tag:replied)" :sort-order newest-first :key "s")))))
#+end_src
** Initialize =gnus=
*** Description
Gnus, or Gnus Network User Services, is a message reader which is part of GNU Emacs.
*** Code
#+begin_src emacs-lisp
  (use-package gnus
	:ensure t
	:config
	(setq gnus-select-method
		  '(nnimap "gmail"
				   (nnimap-address "imap.gmail.com")))
	(when window-system
	  (setq gnus-sum-thread-tree-indent "  ")
	  (setq gnus-sum-thread-tree-root "● ")
	  (setq gnus-sum-thread-tree-false-root "◯ ")
	  (setq gnus-sum-thread-tree-single-indent "◎ ")
	  (setq gnus-sum-thread-tree-vertical        "│")
	  (setq gnus-sum-thread-tree-leaf-with-other "├─► ")
	  (setq gnus-sum-thread-tree-single-leaf     "╰─► "))

	;; Make Gnus prettier
	(setq gnus-summary-line-format
		  (concat
		   "%0{%U%R%z%}"
		   "%3{│%}" "%1{%d%}" "%3{│%}" ;; date
		   "  "
		   "%4{%-20,20f%}"               ;; name
		   "  "
		   "%3{│%}"
		   " "
		   "%1{%B%}"
		   "%s\n"))

	(setq gnus-summary-display-arrow t)

	;; Make Gnus startup faster
	(setq gnus-check-new-newsgroups nil
		  gnus-check-bogus-newsgroups nil)

	;; Fixing summary buffer
	;; There’s no need to recenter the summary buffer all the time. It only slows gnus down.
	(setq gnus-auto-center-summary nil)
	;; Enter the summary buffer faster
	(setq gnus-nov-is-evil nil
		  gnus-show-threads t
		  gnus-use-cross-reference nil)

	;; News check
	(defun gnus-demon-scan-news ()
	  (interactive)
	  (when gnus-plugged
		(let ((win (current-window-configuration))
			  (gnus-read-active-file nil)
			  (gnus-check-new-newsgroups nil)
			  (gnus-verbose 2)
			  (gnus-verbose-backends 5))
		  (unwind-protect
			  (save-window-excursion
				(when (gnus-alive-p)
				  (with-current-buffer gnus-group-buffer
					(gnus-group-get-new-news gnus-activate-level))))
			(set-window-configuration win)))))

	;; Configuring mail appearance
	(setq gnus-treat-strip-multiple-blank-lines t)
	(setq gnus-treat-trailing-blank-lines t)
	;; let's see some smiles in gnus
	(setq gnus-treat-display-smileys t)
	(setq gnus-treat-emphasize 'head)

	;; Gnus automatic scoring
	(setq gnus-use-adaptive-scoring t))
#+end_src
** Initialize =erc=
*** Description
ERC is a powerful, modular, and extensible IRC client for Emacs.
*** Code
#+begin_src emacs-lisp
  (use-package erc
	:ensure t
	:custom
	(erc-autojoin-timing 'ident)
	(erc-autojoin-channels-alist '(("irc.rizon.net" "#rice")))
	(erc-fill-function 'erc-fill-static)
	(erc-fill-static-center 22)
	(erc-hide-list '("JOIN" "PART" "QUIT"))
	(erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
	(erc-lurker-threshold-time 43200)
	(erc-server-reconnect-attempts 5)
	(erc-server-reconnect-timeout 3)
	(erc-quit-reason 'erc-quit-reason-normal)
	(erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
							   "324" "329" "332" "333" "353" "477"))
	:config
	;; login
	(setq erc-nickserv-identify-mode 'autodetect)
	;; Interpret mIRC-style color commands in IRC chats
	(setq erc-interpret-mirc-color t)
	;; Kill buffers for channels after /part
	(setq erc-kill-buffer-on-part t)
	;; Kill buffers for private queries after quitting the server
	(setq erc-kill-queries-on-quit t)
	;; Kill buffers for server messages after quitting the server
	(setq erc-kill-server-buffer-on-quit t)
	;; open query buffers in the current window
	(setq erc-query-display 'buffer)
	;; misc stuff
	(setq erc-prompt " >"
		  erc-nick '("diamondbond" "diamondbond_"))
	(add-to-list 'erc-modules 'notifications)
	(add-to-list 'erc-modules 'spelling)
	(erc-services-mode 1)
	(erc-update-modules))
#+end_src
** Initialize =modus-themes=
*** Description
Accessible themes for GNU Emacs, conforming with the highest standard for colour contrast between background and foreground values (WCAG AAA).
*** Code
#+begin_src emacs-lisp
  (use-package modus-themes
	:ensure t
	:defer nil
	:init
	;; Add all your customizations prior to loading the themes
	(setq modus-themes-italic-constructs t
		  modus-themes-bold-constructs t
		  modus-themes-region '(accented bg-only no-extend))

	;; Load the theme files before enabling a theme
	(modus-themes-load-themes)
	:config
	(modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
	:bind ("S-<f5>" . modus-themes-toggle))
#+end_src
** Initialize =dracula-theme=
#+begin_src emacs-lisp
  (use-package dracula-theme :disabled t)
#+end_src
** Initialize =crux=
*** Description
A Collection of Ridiculously Useful eXtensions.
*** Code
#+begin_src emacs-lisp
  (use-package crux
	:ensure t)
#+end_src
** Initialize =deft=
*** Description
Deft is included for quicksearch of entire ~/org directory.
*** Code
#+begin_src emacs-lisp
  (use-package deft
	:ensure t
	:config
	(setq deft-directory org-directory
		  deft-recursive t
		  deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
		  deft-use-filename-as-title t)
	:bind
	("C-c n d" . deft))
#+end_src
** Initialize =engine-mode=
*** Description
engine-mode is a global minor mode for Emacs that enables you to easily define search engines, bind them to keybindings, and query them from the comfort of your editor.
*** Code
#+begin_src emacs-lisp
  (use-package engine-mode
	:ensure t
	:config
	(defengine google "https://google.com/search?q=%s" :keybinding "g"
	  :docstring "Applied Google-fu.")
	(defengine google-images "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s" :docstring "Google Images")
	(defengine google-maps "http://maps.google.com/maps?q=%s" :docstring "Mappin' it up.")
	(defengine duckduckgo "https://duckduckgo.com/?q=%s" :keybinding "d"
	  :docstring "DDG!")
	(defengine qwant "https://www.qwant.com/?q=%s" :keybinding "q"
	  :docstring "Qwant it.")
	(defengine wikipedia "https://en.wikipedia.org/wiki/Special:Search?search=%s" :keybinding "w"
	  :docstring "Search Wikipedia.")
	(defengine youtube "http://www.youtube.com/results?aq=f&oq=&search_query=%s" :keybinding "y"
	  :docstring "Search YouTube.")
	(defengine twitter "https://twitter.com/search?q=%s" :keybinding "t"
	  :docstring "Search Twitter.")
	(defengine github "https://github.com/search?ref=simplesearch&q=%s" :keybinding "h"
	  :docstring "Search GitHub.")
	(defengine melpa "https://melpa.org/#/?q=%s" :keybinding "m"
	  :docstring "Search the Milkypostman's Emacs Lisp Package Archive.")
	(defengine stack-overflow "https://stackoverflow.com/search?q=%s" :keybinding "s"
	  :docstring "Search Stack Overflow.")
	(defengine wolfram-alpha "http://www.wolframalpha.com/input/?i=%s" :keybinding "a"
	  :docstring "Search Wolfram Alpha.")
	(defengine rfcs "http://pretty-rfc.herokuapp.com/search?q=%s" :keybinding "r"
	  :docstring "Search RFC documents.")
	(defengine ctan "http://www.ctan.org/search/?x=1&PORTAL=on&phrase=%s" :keybinding "c"
	  :docstring "Search the Comprehensive TeX Archive Network")
	(defengine project-gutenberg "http://www.gutenberg.org/ebooks/search/?query=%s" :keybinding "p"
	  :docstring "Search Project Gutenberg.")
	(engine/set-keymap-prefix (kbd "C-x /"))
	(setq engine/browser-function 'browse-url-firefox)
	:init
	(engine-mode t))
#+end_src
** Initialize =flymake=
*** Description
FlyMake performs on-the-fly syntax checks on the files being edited using the external syntax check tool (usually the compiler).

This snippet removes flymake diagnostic functions with proc-legacy-flymake mode.
*** Code
#+begin_src emacs-lisp
  (remove-hook 'flymake-diagnostic-functions 'flymake-proc-legacy-flymake)
#+end_src
** Initialize =flyspell=
*** Description
Spell checking, requires Hunspell.
Enable on the fly with M-x flyspell-mode.
*** Code
#+begin_src emacs-lisp
  (use-package flyspell
	:ensure t
	:config
	(setq ispell-program-name "hunspell"
		  ispell-default-dictionary "en_US")
	:custom
	(defalias 'word-count 'count-words)
	:bind (("M-<f7>" . flyspell-buffer)))
#+end_src
** Initialize =clm=
*** Description
Show event history and command history of some or all buffers.
*** Code
#+begin_src emacs-lisp
  (use-package command-log-mode
	:ensure t)
#+end_src
** Initialize =search=
*** Description
Deadgrep and ag - the_silver_searcher.
*** Code
#+begin_src emacs-lisp
  (use-package deadgrep
	:defer t
	:commands deadgrep)

  (use-package ag
	:ensure t
	:defer nil)
#+end_src
** Initialize =imenu-list=
*** Description
Popup contents mini-buffer.
*** Code
#+begin_src emacs-lisp
  (use-package imenu-list
	:ensure t
	:config
	(setq imenu-list-auto-resize t))
#+end_src
** Initialize =diminish=
*** Description
Diminish hides minor modes to prevent cluttering your mode line.
*** Code
#+begin_src emacs-lisp
	(use-package diminish
	  :ensure t
	  :init
	  ;; Diminish as mode is already loaded
	  (diminish 'visual-line-mode "")
	  (diminish 'abbrev-mode "")
	  (diminish 'c-mode "")
	  (diminish 'yas "")
	  :config
	  ;; Diminish after mode is loaded
	  (eval-after-load "flymake" '(diminish 'flymake-mode))
	  (eval-after-load "ox-beamer" '(diminish 'org-beamer-mode))
	  (eval-after-load "which-key" '(diminish 'which-key-mode))
	  (eval-after-load "eldoc" '(diminish 'eldoc-mode)))
#+end_src
* Languages
** LSP
*** Description
Language Server Protocol.
Handles the following languages:
- C/C++
- [WEB] JS/JSX/HTML/CSS
- Python
*** Code
#+begin_src emacs-lisp
  (use-package lsp-mode
	:ensure t
	:init
	;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
	(setq lsp-keymap-prefix "C-c l")
	:hook ((c-mode          ; clangd
			c++-mode        ; clangd
			c-or-c++-mode   ; clangd
			js-mode         ; ts-ls (tsserver wrapper)
			js-jsx-mode     ; ts-ls (tsserver wrapper)
			typescript-mode ; ts-ls (tsserver wrapper)
			python-mode     ; pyright
			web-mode        ; ts-ls/HTML/CSS
			) . lsp-deferred)
	:commands lsp
	:config
	(setq lsp-auto-guess-root t)
	(setq lsp-log-io nil)
	(setq lsp-restart 'auto-restart)
	(setq lsp-enable-symbol-highlighting nil)
	(setq lsp-enable-on-type-formatting nil)
	(setq lsp-signature-auto-activate nil)
	(setq lsp-signature-render-documentation nil)
	(setq lsp-eldoc-hook nil)
	(setq lsp-modeline-code-actions-enable nil)
	(setq lsp-modeline-diagnostics-enable nil)
	(setq lsp-headerline-breadcrumb-enable nil)
	(setq lsp-semantic-tokens-enable nil)
	(setq lsp-enable-folding nil)
	(setq lsp-enable-imenu nil)
	(setq lsp-enable-snippet nil)
	(setq lsp-completion-provider :none)
	(setq read-process-output-max (* 1024 1024)) ;; 1MB
	(setq completion-styles '(orderless)
		  completion-category-defaults nil)
	(setq lsp-idle-delay 0.5)
	(setq lsp-clients-typescript-server "typescript-language-server"
		  lsp-clients-typescript-server-args '("--stdio"))
	(setq lsp-disabled-clients '(eslint)))

  (use-package lsp-ui
	:ensure t
	:after lsp
	:commands lsp-ui-mode
	:config
	(setq lsp-ui-doc-enable nil)
	(setq lsp-ui-doc-header t)
	(setq lsp-ui-doc-include-signature t)
	(setq lsp-ui-doc-border (face-foreground 'default))
	(setq lsp-ui-sideline-show-code-actions t)
	(setq lsp-ui-sideline-delay 0.05))

  (use-package lsp-pyright
	:ensure t
	:after lsp
	:hook (python-mode . (lambda () (require 'lsp-pyright) (lsp-deferred)))
	:init (when (executable-find "python3")
			(setq lsp-pyright-python-executable-cmd "python3")))
#+end_src
** Go
*** Description
Go-mode.
*** Code
#+begin_src emacs-lisp
  (use-package go-mode
	:ensure t
	:mode "\\.go\\'"
	:config
	(defun my/go-mode-hook()
	  ;;(setq-default tab-width 2)
	  (add-hook 'before-save-hook 'gofmt-before-save)
	  (set (make-local-variable 'compile-command)
		   "go test"))
	:hook ((go-mode . my/go-mode-hook)))
#+end_src
** Rust
*** Description
Rust-mode.
*** Code
#+begin_src emacs-lisp
  (use-package rust-mode
	:ensure t
	:mode "\\.rs\\'"
	:hook ((go-mode . subword-mode)))
#+end_src
** Lisp
*** Common Lisp
**** Description
SLIME - Common Lisp REPL.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package slime
	:ensure t
	:config
	(setq inferior-lisp-program "/usr/bin/sbcl")
	(setq slime-contribs '(slime-fancy slime-quicklisp)))
#+END_SRC
*** Scheme Lisp
**** Description
Geiser - Scheme Lisp REPL.
**** Code
#+BEGIN_SRC emacs-lisp
  (use-package geiser
	:ensure t
	:config
	(setq geiser-active-implementations '(chez guile mit))
	(setq geiser-chez-binary "chez")
	(add-hook 'scheme-mode-hook 'geiser-mode)
	(setq geiser-default-implementation 'chez))

  (use-package geiser-chez
	:ensure t
	:after geiser
	:config
	(add-to-list 'auto-mode-alist
				 '("\\.sls\\'" . scheme-mode)
				 '("\\.sc\\'" . scheme-mode)))

  (defun geiser-save ()
	(interactive)
	(geiser-repl--write-input-ring))
#+end_src
** Lua
*** Description
Lua mode.
*** Code
#+begin_src emacs-lisp
  (use-package lua-mode
	:ensure t
	:config
	(setq lua-indent-level 2))
#+end_src
** JSON
*** Description
Syntax highlighting for json files.
*** Code
#+begin_src emacs-lisp
  (use-package json-mode
	:ensure t
	:mode ("\\.json\\'" . json-mode))
#+end_src
** Markdown
*** Description
Markdown-mode & enable auto fill.
*** Code
#+begin_src emacs-lisp
  (use-package markdown-mode
	:ensure t
	:mode "\\.md\\'"
	:hook ((markdown-mode . auto-fill-mode)))
#+end_src
** LaTeX
*** Description
Auctex for LaTeX.
*** Code
#+begin_src emacs-lisp
  (use-package auctex
	:ensure t
	:config
	(setq TeX-auto-save t)
	(setq TeX-parse-self t)
	(setq-default TeX-master nil))
#+end_src
** Web
*** Description
Web mode for JS/JSX/TS/TSX/HTML files
*** Code
#+begin_src emacs-lisp
  (use-package web-mode
	:ensure t
	:custom
	(setq web-mode-markup-indent-offset 2)
	(setq web-mode-code-indent-offset 2)
	(setq web-mode-css-indent-offset 2)
	:mode (("\\.js\\'" . web-mode)
		   ("\\.jsx\\'" .  web-mode)
		   ("\\.ts\\'" . web-mode)
		   ("\\.tsx\\'" . web-mode)
		   ("\\.html\\'" . web-mode))
	:commands web-mode)
#+end_src
** Prettier
*** Description
Prettier formatter for JSX & TSX.
*** Code
#+begin_src emacs-lisp
  (use-package prettier-js
	:ensure t)

  (add-hook 'web-mode-hook #'(lambda ()
							   (enable-minor-mode
								'("\\.jsx?\\'" . prettier-js-mode))
							   (enable-minor-mode
								'("\\.tsx?\\'" . prettier-js-mode))))
#+end_src
* Functions
** Eshell
*** Description
Improve eshell prompt and assign aliases, also setup some custom helper functions for easier use.
*** Prompt
#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-regexp "^[^αλ\n]*[αλ] ")
  (setq eshell-prompt-function
		(lambda nil
		  (concat
		   (if (string= (eshell/pwd) (getenv "HOME"))
			   (propertize "~" 'face `(:foreground "#99CCFF"))
			 (replace-regexp-in-string
			  (getenv "HOME")
			  (propertize "~" 'face `(:foreground "#99CCFF"))
			  (propertize (eshell/pwd) 'face `(:foreground "#99CCFF"))))
		   (if (= (user-uid) 0)
			   (propertize " α " 'face `(:foreground "#FF6666"))
			 (propertize " λ " 'face `(:foreground "#A6E22E"))))))

  (setq eshell-highlight-prompt nil)
#+END_SRC
*** Clear
#+begin_src emacs-lisp
  (defun eshell/clear-scrollback ()
	"Clear the scrollback content of the eshell window."
	(let ((inhibit-read-only t))
	  (erase-buffer)))
#+end_src
*** Aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'open 'find-file-other-window)
  (defalias 'clean 'eshell/clear-scrollback)
#+END_SRC
*** Open eshell in other window
#+BEGIN_SRC emacs-lisp
  (defun eshell-other-window ()
	"Create or visit an eshell buffer."
	(interactive)
	(if (not (get-buffer "*eshell*"))
		(progn
		  (split-window-sensibly (selected-window))
		  (other-window 1)
		  (eshell))
	  (switch-to-buffer-other-window "*eshell*")))
#+END_SRC
** Enable Minor mode
#+begin_src emacs-lisp
  (defun enable-minor-mode (my-pair)
	"Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
	(if (buffer-file-name)
		(if (string-match (car my-pair) buffer-file-name)
			(funcall (cdr my-pair)))))
#+end_src
** Split and follow
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
	"Split and follow horizontally."
	(interactive)
	(split-window-below)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
	"Split and follow vertically."
	(interactive)
	(split-window-right)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Erc handlers
#+begin_src emacs-lisp
  (defun erc-start ()
	"Start ERC and connect to Rizon"
	(interactive)
	(save-current-buffer
	  (erc :server "irc.rizon.net" :port "6667" :nick "diamondbond")))

  (defun erc-quit ()
	"Quit ERC"
	(interactive)
	(erc-quit-server nil))
#+end_src
** Update emacs git
#+begin_src emacs-lisp
  (defun update-emacs-git ()
	"Backup config.org to git"
	(interactive)
	(async-shell-command "cp ~/.emacs.d/config.org ~/git/emacs/config.org"))

  (defun update-emacs-pkglist ()
	"Backup straight lockfile to git"
	(interactive)
	(straight-freeze-versions)
	(async-shell-command "cp ~/.emacs.d/straight/versions/default.el ~/git/emacs/straight/versions/"))
#+end_src
** Sync email
#+begin_src emacs-lisp
  (defun sync-email ()
	"Sync email to local database."
	(interactive)
	(async-shell-command "offlineimap"))
#+end_src
** Run in vterm
#+begin_src emacs-lisp
  (defun run-in-vterm-kill (process event)
	"A process sentinel. Kills PROCESS's buffer if it is live."
	(let ((b (process-buffer process)))
	  (and (buffer-live-p b)
		   (kill-buffer b))))

  (defun run-in-vterm (command)
	"Execute string COMMAND in a new vterm.

	Interactively, prompt for COMMAND with the current buffer's file
	name supplied. When called from Dired, supply the name of the
	file at point.

	Like `async-shell-command`, but run in a vterm for full terminal features.

	The new vterm buffer is named in the form `*foo bar.baz*`, the
	command and its arguments in earmuffs.

	When the command terminates, the shell remains open, but when the
	shell exits, the buffer is killed."
	(interactive
	 (list
	  (let* ((f (cond (buffer-file-name)
					  ((eq major-mode 'dired-mode)
					   (dired-get-filename nil t))))
			 (filename (concat " " (shell-quote-argument (and f (file-relative-name f))))))
		(read-shell-command "Command: "))))
	(with-current-buffer (vterm (concat "*" command "*"))
	  (set-process-sentinel vterm--process #'run-in-vterm-kill)
	  (vterm-send-string command)
	  (vterm-send-return)))
#+end_src
** Music
#+begin_src emacs-lisp
  (defun music ()
	"Play music with ncmpcpp."
	(interactive)
	(run-in-vterm "ncmpcpp"))
#+end_src
** Yank Whole Buffer
#+begin_src emacs-lisp
  (defun yank-whole-buffer ()
	"Yanks whole buffer."
	(interactive)
	(save-excursion
	  (mark-whole-buffer)
	  (call-interactively 'evil-yank)))
#+end_src
** Dev-C++ Compile & Run
#+begin_src emacs-lisp
  (defun devcpp/compile-and-run ()
	"Yanks Current Buffer, switches to QEMU & pastes clipboard."
	(interactive)
	(yank-whole-buffer)
	(async-shell-command "sh -c ~/bin/stqap.sh"))
#+end_src
** Upcase last word
#+begin_src emacs-lisp
  (defun upcase-last-word ()
	(interactive)
	(move-end-of-line 1)
	(backward-word 1)
	(upcase-word 1)
	(move-beginning-of-line 1)
	(next-line 1 1))
#+end_src
** Next/Prev 15-lines
#+begin_src emacs-lisp
  (defun next-15-lines ()
	"Move to the next 15 lines."
	(interactive)
	(forward-line 15))

  (defun previous-15-lines ()
	"Move to the previous 15 lines."
	(interactive)
	(forward-line -15))
#+end_src
** Enable athena toolbar
#+begin_src emacs-lisp
  ;;(add-to-list 'default-frame-alist '(tool-bar-lines . 1))
#+end_src
** Honeydew
#+begin_src emacs-lisp
  ;; (add-to-list 'default-frame-alist '(background-color . "honeydew")) ;; f0fff0
#+end_src
** Open emacs-devel
#+begin_src emacs-lisp
  (defun open-emacs-devel ()
	"Starts gnus & connects to news.gmane.io/emacs-devel"
	(interactive)
	(setq last-command-event 121)
	(gnus nil)
	(setq last-command-event 121)
	(execute-extended-command nil "gnus" "gnus")
	(setq last-command-event 13)
	(gnus-group-browse-foreign-server
	 `(nntp "news.gmane.io"))
	(setq last-command-event 13)
	(swiper)
	(setq last-command-event 13)
	(gnus-browse-select-group nil))

  ;; (fset 'open-emacs-devel
  ;; 	  (kmacro-lambda-form [?\M-x ?g ?n ?u ?s return ?y ?B return ?n ?e ?w ?s ?. ?g ?m ?a ?n ?e ?. ?i ?o return ?\C-s ?e ?m ?a ?c ?s ?. ?d ?e ?v ?e ?l down return return return ?\M-x ?k ?m ?a ?c ?r ?o ?- ?e ?n ?d ?- ?o ?r] 0 "%d"))
#+end_src
