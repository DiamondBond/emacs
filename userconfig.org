#+STARTUP: overview
#+TITLE: User Configuration
#+AUTHOR: Diamond Bond
#+DESCRIPTION: User specified configuration.
#+LANGUAGE: en
#+OPTIONS: num:nil

* Header
Enable lexical binding.

#+begin_src emacs-lisp
  ;;; userconfig.el --- User Configuration. -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022 Diamond Bond
  ;; This file is NOT part of GNU Emacs.
  ;; This file is free software.

  ;; Author: Diamond Bond <diamondbond1@gmail.com>
  ;; URL: https://github.com/diamondbond/emacs
  ;; Package-Requires: ((emacs "28.1"))

  ;;; Commentary:
  ;; This file provides the user configuration.

  ;;; Code:

#+end_src

* Email

** Load =email= module

*** Description

URL: https://github.com/DiamondBond/emacs/blob/master/modules/mail.org

Email in Emacs via mu4e & offlineimap.

*** Code

#+begin_src emacs-lisp
  ;; load email module
  (when (file-directory-p "~/.emacs.d/modules")
	(when (file-readable-p "~/.emacs.d/modules/mail.org")
	  (org-babel-load-file (expand-file-name "~/.emacs.d/modules/mail.org"))))
#+end_src

* Discord

** Load =elcord= package

*** Description

URL: https://github.com/Mstrodl/elcord

Discord RPC for Emacs.
=M-x elcord= to toggle.

NOTE: Replace =<YOUR-ID-HERE>= with your own ID.

*** Code

#+begin_src emacs-lisp
  ;; load elcord
  (use-package elcord
	:straight t
	:config
	;; set api token
	(setq elcord-client-id "<YOUR-ID-HERE>")
	;; set icon
	(setq elcord-editor-icon "emacs_icon")
	;; silence
	(setq elcord-quiet t)
	;; override buffer-details-format
	(defun elcord-buffer-details-format ()
	  "Return the buffer details string shown on discord."
	  (format "%s" (buffer-name)))
	;; handy alias to start elcord
	(defalias 'discord 'elcord-mode))
#+end_src

* Functions

*** =sync/emacs=

Sync Emacs configuration to local git repository.

#+begin_src emacs-lisp
  (defun sync/emacs ()
	"Sync Emacs configuration."
	(interactive)
	(async-shell-command "~/bin/sync-emacs.sh"))

  (defun sync/emacs-lockfile ()
	"Sync Emacs 'lock-file'."
	(interactive)
	(straight-freeze-versions)
	(async-shell-command "cp ~/.emacs.d/straight/versions/default.el ~/git/emacs/straight/versions/"))
#+end_src

*** =sync/dotfiles=

Sync dotfiles to GitHub.

#+begin_src emacs-lisp
  (defun sync/dotfiles ()
	"Sync dotfiles."
	(interactive)
	(async-shell-command "~/bin/sync-dotfiles.sh")
	(alert "Sync Complete." :severity 'trivial))
#+end_src

*** =sync/neocities=

Sync Emacs configuration to neocities.

#+begin_src emacs-lisp
  (defun sync/neocities ()
	"Sync neocities."
	(interactive)
	(save-window-excursion
	  (async-shell-command "~/bin/sync-neocities.sh")))
#+end_src

*** =config/update=

#+begin_src emacs-lisp
  ;; user functions
  (defun config/push ()
	(async-shell-command "cd ~/git/emacs; git add -A; git commit -asm 'Automatic Sync'; git push"))

  (defun config/update ()
	"@USER-OVERRIDE: Updates the Emacs configuration git repository."
	(interactive)
	(sync/emacs)
	(config/push))
#+end_src

*** =auth/backup/restore=

Backup/Restore auth to/from Dropbox.

#+begin_src emacs-lisp
  (defun auth/backup ()
	"Backup authinfo & personal info to Dropbox."
	(interactive)
	(async-shell-command "~/bin/auth-backup.sh"))

  (defun auth/restore ()
	"Restore authinfo & personal info to Dropbox."
	(interactive)
	(async-shell-command "~/bin/auth-restore.sh"))
#+end_src

* Footer

#+begin_src emacs-lisp

  ;;; userconfig.el ends here
#+end_src
