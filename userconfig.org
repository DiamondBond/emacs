#+STARTUP: overview
#+TITLE: User Configuration
#+AUTHOR: Diamond Bond
#+DESCRIPTION: User specified configuration.
#+LANGUAGE: en
#+OPTIONS: num:nil
#+PROPERTY: header-args :mkdirp yes :tangle yes :results silent :noweb yes
#+auto_tangle: t

* Header

Enable lexical binding.

#+begin_src emacs-lisp
  ;;; userconfig.el --- User Configuration. -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022 Diamond Bond
  ;; This file is NOT part of GNU Emacs.
  ;; This file is free software.

  ;; Author: Diamond Bond <diamondbond1@gmail.com>
  ;; URL: https://github.com/diamondbond/emacs
  ;; Package-Requires: ((emacs "28.1"))

  ;;; Commentary:
  ;; This file provides the user configuration.

  ;;; Code:

#+end_src

* Modules

** =evil=

#+begin_src emacs-lisp
  ;; load evil module
  (when (file-directory-p
		 (concat user-emacs-directory "/modules"))
	(load-file
	 (concat user-emacs-directory "/modules/evil.el")))
#+end_src

** =reddit=

#+begin_src emacs-lisp
  ;; load reddit module
  (when (file-directory-p
		 (concat user-emacs-directory "/modules"))
	(load-file
	 (concat user-emacs-directory "/modules/reddit.el")))
#+end_src

** =discord=

#+begin_src emacs-lisp
  ;; load discord module
  (when (file-directory-p
		 (concat user-emacs-directory "/modules"))
	(load-file
	 (concat user-emacs-directory "/modules/discord.el")))
#+end_src

** =email=

#+begin_src emacs-lisp
  ;; load email module
  (when (file-directory-p
		 (concat user-emacs-directory "/modules"))
	(load-file
	 (concat user-emacs-directory "/modules/mail.el")))
#+end_src

** =doom-modeline=
#+begin_src emacs-lisp
  (use-package doom-modeline
	:init (doom-modeline-mode)
	:config
	(setq doom-modeline-buffer-file-name-style 'file-name
		  doom-modeline-enable-word-count t
		  doom-modeline-buffer-encoding nil
		  doom-modeline-icon t ;; Enable/disable all icons
		  doom-modeline-modal-icon nil ;; Icon for Evil mode
		  doom-modeline-hud t ;; Replaces scroll-bar
		  doom-modeline-major-mode-icon t
		  doom-modeline-major-mode-color-icon t
		  doom-modeline-bar-width 3))
#+end_src

** =disable-gui=
#+begin_src emacs-lisp
  (if (fboundp 'menu-bar-mode)
	  (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode)
	  (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode)
	  (scroll-bar-mode -1))
  ;; (set-scroll-bar-mode 'right)
#+end_src

* Functions

*** =sync/dotfiles=

Sync dotfiles to GitHub.

#+begin_src emacs-lisp
  (when (file-readable-p "~/bin/sync-dotfiles.sh")
	(defun sync/dotfiles ()
	  "Sync dotfiles."
	  (interactive)
	  (async-shell-command "~/bin/sync-dotfiles.sh")))
#+end_src

*** =sync/neocities=

Sync Emacs configuration to neocities.

#+begin_src emacs-lisp
  (when (file-readable-p "~/bin/sync-neocities.sh")
	(defun sync/neocities ()
	  "Sync neocities."
	  (interactive)
	  (save-window-excursion
		(async-shell-command "~/bin/sync-neocities.sh"))))
#+end_src

*** =auth/backup=

Backup auth files.

#+begin_src emacs-lisp
  (when (file-readable-p "~/bin/auth-backup.sh")
	(defun auth/backup ()
	  "Backup auth."
	  (interactive)
	  (async-shell-command "~/bin/auth-backup.sh")))
#+end_src

*** =auth/restore=

Restore auth files.

#+begin_src emacs-lisp
  (when (file-readable-p "~/bin/auth-restore.sh")
	(defun auth/restore ()
	  "Restore auth."
	  (interactive)
	  (async-shell-command "~/bin/auth-restore.sh")))
#+end_src

* Footer

#+begin_src emacs-lisp

  (provide 'userconfig)
  ;;; userconfig.el ends here
#+end_src
