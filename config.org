#+STARTUP: overview
#+TITLE: emacs configuration
#+LANGUAGE: en
#+OPTIONS: num:nil

* Dependencies
** compiling emacs 27.1
*** dependencies (ubuntu)
#+begin_src sh
    build-essential
    imagemagick
    ripgrep
    libxpm-dev
    libjpeg-dev
    libgnutls28-dev
    libgif-dev
    libtiff-dev
    libacl1-dev
    libgtk-3-dev
    libwebkit2gtk-4.0-dev
    librsvg2-dev
    libmagickcore-dev
    libmagick++-dev
    libgpm-dev
    libselinux1-dev
    libm17n-dev
    libotf-dev
    libsystemd-dev
    libtool-bin
    pandoc texlive-extra-utils texlive-latex-extra texlive-latex-recommended

sudo apt install build-essential imagemagick ripgrep libxpm-dev libjpeg-dev libgnutls28-dev libgif-dev libtiff-dev libacl1-dev libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev libmagickcore-dev libmagick++-dev libgpm-dev libselinux1-dev libm17n-dev libotf-dev libsystemd-dev libtool-bin pandoc texlive-latex texlive-extra-utils texlive-latex-extra texlive-latex-recommended cmake cmake-extras html2ps
#+end_src
*** configuration
#+begin_src sh
./configure --disable-silent-rules \
--with-modules --with-file-notification=inotify --with-mailutils \
--with-x=yes --with-x-toolkit=gtk3 --with-xwidgets --with-lcms2 \
--with-imagemagick
#+end_src
*** default sys-cfg (from ubuntu repos)
#+begin_src sh
system-configuration-options
"--build x86_64-linux-gnu --prefix=/usr --sharedstatedir=/var/lib --libexecdir=/usr/lib --localstatedir=/var/lib --infodir=/usr/share/info --mandir=/usr/share/man --enable-libsystemd --with-pop=yes --enable-locallisppath=/etc/emacs:/usr/local/share/emacs/26.3/site-lisp:/usr/local/share/emacs/site-lisp:/usr/share/emacs/26.3/site-lisp:/usr/share/emacs/site-lisp --with-sound=alsa --without-gconf --with-mailutils --build x86_64-linux-gnu --prefix=/usr --sharedstatedir=/var/lib --libexecdir=/usr/lib --localstatedir=/var/lib --infodir=/usr/share/info --mandir=/usr/share/man --enable-libsystemd --with-pop=yes --enable-locallisppath=/etc/emacs:/usr/local/share/emacs/26.3/site-lisp:/usr/local/share/emacs/site-lisp:/usr/share/emacs/26.3/site-lisp:/usr/share/emacs/site-lisp --with-sound=alsa --without-gconf --with-mailutils --with-x=yes --with-x-toolkit=gtk3 --with-toolkit-scroll-bars 'CFLAGS=-g -O2 -fdebug-prefix-map=/build/emacs-mEZBk7/emacs-26.3+1=. -fstack-protector-strong -Wformat -Werror=format-security -Wall' 'CPPFLAGS=-Wdate-time -D_FORTIFY_SOURCE=2' 'LDFLAGS=-Wl,-Bsymbolic-functions -Wl,-z,relro'"

system-configuration-features
"XPM JPEG TIFF GIF PNG RSVG IMAGEMAGICK SOUND GPM DBUS GSETTINGS GLIB NOTIFY ACL LIBSELINUX GNUTLS LIBXML2 FREETYPE M17N_FLT LIBOTF XFT ZLIB TOOLKIT_SCROLL_BARS GTK3 X11 XDBE XIM THREADS LIBSYSTEMD LCMS2"
#+end_src
*** desired sys-cfg
#+begin_src sh
system-configuration-options
"--disable-silent-rules --with-modules --with-file-notification=inotify --with-mailutils --with-x=yes --with-x-toolkit=gtk3 --with-xwidgets --with-lcms2 --with-imagemagick"

system-configuration-features
"XPM JPEG TIFF GIF PNG RSVG IMAGEMAGICK SOUND GPM DBUS GSETTINGS GLIB NOTIFY INOTIFY ACL LIBSELINUX GNUTLS LIBXML2 FREETYPE HARFBUZZ M17N_FLT LIBOTF XFT ZLIB TOOLKIT_SCROLL_BARS GTK3 X11 XDBE XIM MODULES THREADS XWIDGETS LIBSYSTEMD PDUMPER LCMS2 GMP"
#+end_src
** System
=clang= as backend for C and C++ autocompletion 
=llvm= & =libclang-dev= to install irony server
(optional) =mvn= maven for java project handling through =meghanada=
*Monaco* font
** Emacs
;; themes
M-x package-install RET modus-operandi
M-x package-install RET modus-vivendi
M-x package-install RET spacemacs-theme
M-x package-install RET plan9-theme
;; utils
M-x package-install RET pdf-tools
M-x pdf-tools-install
M-x irony-install-server
M-x vterm
* QoL section
Minor quality-of-life modifications for a more pleasant Emacs experience
** Enable line numbers
Emacs breaks certain modes when it has line-numbers-mode enabled, (like docview or ansi-term) so I utilize the approach of only enabling it on some major modes rather than globally
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
#+END_SRC
** Enable column numbers
Show column number in modeline
#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC
** Show parent parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Disable the default startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+END_SRC
** Disable most gui elements
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Enable tabs
#+BEGIN_SRC emacs-lisp
;;(tab-bar-mode 1)
#+END_SRC
** Enable copypasting outside of Emacs
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC
** Disable automatic creation of backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** Enable conservative scrolling
#+BEGIN_SRC emacs-lisp
  ;;(setq scroll-conservatively 100)
	(setq scroll-conservatively 1)
	(setq mouse-wheel-scroll-amount '(5))
	(setq mouse-wheel-progressive-speed nil)
#+END_SRC
** Disable ring-bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
  (setq c-basic-offset tab-width)
  (setq-default electric-indent-inhibit t)
  (setq-default indent-tabs-mode t)
  (setq backward-delete-char-untabify-method 'nil)
#+END_SRC
** Enable prettify symbols mode
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC
** Enable bracket pair-matching
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC
** Creating a new window switches your cursor to it
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
	(interactive)
	(split-window-below)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
	(interactive)
	(split-window-right)
	(balance-windows)
	(other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Transform yes-or-no questions into y-or-n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Easier resize bindigs
Super - Control - <arrow>
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "s-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-C-<down>") 'shrink-window)
  (global-set-key (kbd "s-C-<up>") 'enlarge-window)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Defer loading most packages for quicker startup times
#+BEGIN_SRC emacs-lisp
(setq use-package-always-defer t)
#+END_SRC
** Browser (eww)
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC
* Personal Keybinds
** Swap windows
C-x x swaps windows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x x") 'window-swap-states)
#+END_SRC
** Center window
#+begin_src emacs-lisp
;; center the window by adding a very wide fringe
(define-minor-mode center-window-mode
  "Minor mode to center the window using wide fringes."
  :init-value nil
  :global t
  :group 'editing-basics
  (if (not center-window-mode)
      (set-fringe-style nil);; default
    (set-fringe-mode
     (/ (- (frame-pixel-width)
           (* (+ fill-column 4)
	      (frame-char-width)))
        2))))

;;(center-window-mode 1)

;; Use F9 to toggle centering
;;(global-set-key (kbd "<f9>") 'center-window-mode)
#+end_src
** Generic keybinds
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f9>") 'tab-bar-mode)
(global-set-key (kbd "<f5>") 'revert-buffer)
(global-set-key (kbd "<f6>") 'menu-bar-mode)
(global-set-key (kbd "<f7>") 'scroll-bar-mode)
(global-set-key (kbd "<f8>") 'tool-bar-mode)
(global-set-key (kbd "<f12>") 'linum-mode)
(global-set-key (kbd "<f10>") 'compile)
(global-set-key (kbd "C-x w") 'elfeed)
#+END_SRC
** Theme switching
#+begin_src emacs-lisp
(global-set-key (kbd "<f1>")
                (lambda () (interactive)
                  (load-theme 'modus-operandi t)))
;;(global-set-key (kbd "<f2>")
;;                (lambda () (interactive)
;;                  (load-theme 'spacemacs-dark t)))
#+end_src
* =Org= mode
** Description
One of the main selling points of Emacs! no Emacs distribution is complete without sensible and well-defined org-mode defaults
** Code
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (add-hook 'org-mode-hook 'org-indent-mode)
    (add-hook 'org-mode-hook
              '(lambda ()
                 (visual-line-mode 1)))
	(setq org-display-inline-images t)
	(setq org-redisplay-inline-images t)
	(setq org-startup-with-inline-images "inlineimages")
	(setq org-directory "~/org")
	(global-set-key (kbd "C-<f1>") (lambda()
								 (interactive)
								 (show-all))))

  (use-package org-indent
    :diminish org-indent-mode)

  (use-package org-bullets
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package htmlize
    :ensure t)

(org-babel-do-load-languages 'org-babel-load-languages
    '(
        (shell . t)
    )
)
#+END_SRC
* Eshell
** Prompt
#+BEGIN_SRC emacs-lisp
  (setq eshell-prompt-regexp "^[^αλ\n]*[αλ] ")
  (setq eshell-prompt-function
        (lambda nil
          (concat
           (if (string= (eshell/pwd) (getenv "HOME"))
               (propertize "~" 'face `(:foreground "#99CCFF"))
             (replace-regexp-in-string
              (getenv "HOME")
              (propertize "~" 'face `(:foreground "#99CCFF"))
              (propertize (eshell/pwd) 'face `(:foreground "#99CCFF"))))
           (if (= (user-uid) 0)
               (propertize " α " 'face `(:foreground "#FF6666"))
           (propertize " λ " 'face `(:foreground "#A6E22E"))))))

  (setq eshell-highlight-prompt nil)
#+END_SRC
** Aliases
#+BEGIN_SRC emacs-lisp
  (defalias 'open 'find-file-other-window)
  (defalias 'clean 'eshell/clear-scrollback)
#+END_SRC
** Custom functions
*** Open files as root
#+BEGIN_SRC emacs-lisp
  (defun eshell/sudo-open (filename)
    "Open a file as root in Eshell."
    (let ((qual-filename (if (string-match "^/" filename)
                             filename
                           (concat (expand-file-name (eshell/pwd)) "/" filename))))
      (switch-to-buffer
       (find-file-noselect
        (concat "/sudo::" qual-filename)))))
#+END_SRC
*** Super - Control - RET to open eshell
#+BEGIN_SRC emacs-lisp
  (defun eshell-other-window ()
    "Create or visit an eshell buffer."
    (interactive)
    (if (not (get-buffer "*eshell*"))
        (progn
          (split-window-sensibly (selected-window))
          (other-window 1)
          (eshell))
      (switch-to-buffer-other-window "*eshell*")))

  (global-set-key (kbd "<s-C-return>") 'eshell-other-window)
#+END_SRC
* Use-package
** Initialize =auto-package-update=
*** Description
Auto-package-update automatically updates and removes old packages
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :defer nil
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
** Initialize =diminish=
*** Description
Diminish hides minor modes to prevent cluttering your mode line
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC
*** Historical
22/04/2019: This macro was provided by user [[https://gist.github.com/ld34/44d100b79964407e5ddf41035e3cd32f][ld43]] after I couldn’t figure out how to make diminish work by being at the top of the config file.

#+BEGIN_SRC emacs-lisp
  ;(defmacro diminish-built-in (&rest modes)
  ;  "Accepts a list MODES of built-in emacs modes and generates `with-eval-after-load` diminish forms based on the file implementing the mode functionality for each mode."
  ;  (declare (indent defun))
  ;  (let* ((get-file-names (lambda (pkg) (file-name-base (symbol-file pkg))))
  ;	 (diminish-files (mapcar get-file-names modes))
  ;	 (zip-diminish   (-zip modes diminish-files)))
  ;    `(progn
  ;       ,@(cl-loop for (mode . file) in zip-diminish
  ;		  collect `(with-eval-after-load ,file
  ;			     (diminish (quote ,mode)))))))
  ; This bit goes in init.el
  ;(diminish-built-in
  ;  beacon-mode
  ;  which-key-mode
  ;  page-break-lines-mode
  ;  undo-tree-mode
  ;  eldoc-mode
  ;  abbrev-mode
  ;  irony-mode
  ;  company-mode
  ;  meghanada-mode)
#+END_SRC

27/05/2019: Since the diminish functionality was always built-in in use-package, there was never a point in using a diminish config. lol silly me
** Initialize =spaceline=
*** Description
I tried spaceline and didn't like it. What I did like was its theme
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t)
#+END_SRC
** Initialize =powerline= and utilize the spaceline theme
*** Description
I prefer powerline over spaceline, but the default powerline themes don't work for me for whatever reason, so I use the spaceline theme
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package powerline
	:ensure t
	:init
	(spaceline-spacemacs-theme)
	:hook
	('after-init-hook) . 'powerline-reset)
#+END_SRC
** Initialize =dashboard=
*** Description
The frontend of Witchmacs; without this there'd be no Marisa in your Emacs startup screen
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :defer nil
    :preface
    (defun update-config ()
      "Update Emacs to the latest version."
      (interactive)
      (let ((dir (expand-file-name user-emacs-directory)))
        (if (file-exists-p dir)
            (progn
              (message "emacs is updating!")
              (cd dir)
              (shell-command "git pull")
              (message "Update finished. Switch to the messages buffer to see changes and then restart Emacs"))
          (message "\"%s\" doesn't exist." dir))))

    (defun create-scratch-buffer ()
      "Create a scratch buffer"
      (interactive)
      (switch-to-buffer (get-buffer-create "*scratch*"))
      (lisp-interaction-mode))
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)))
    (setq dashboard-banner-logo-title "Welcome to Emacs!")
    (setq dashboard-startup-banner "~/.emacs.d/img/emacs.png")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-set-init-info t)
    (setq dashboard-init-info (format "%d packages loaded in %s"
                                      (length package-activated-list) (emacs-init-time)))
    (setq dashboard-set-footer nil)
    (setq dashboard-set-navigator t)
    (setq dashboard-navigator-buttons
          `(((,nil
              "Open scratch buffer"
              "Switch to the scratch buffer"
              (lambda (&rest _) (create-scratch-buffer))
              'default)
             (nil
              "Open config.org"
              "Open Emacs configuration file for easy editing"
              (lambda (&rest _) (find-file "~/.emacs.d/config.org"))
              'default)))))
#+END_SRC
*** Notes
If you pay close attention to the code in dashboard, you'll  notice that it uses custom functions defined under the :preface use-package block. I wrote all of those functions by looking at other people's Emacs distributions (Mainly [[https://github.com/seagle0128/.emacs.d][Centaur Emacs]]) and then experimenting and adapting them to Witchmacs. If you dig around, you'll find the same things I did - maybe even more!
*** Historical
22/05/19: On this day, the main maintainers of the dashboard package have added built-in fuinctionality to display init and package load time, thing that I already had implemented much earlier on my own. I have left here my implementation for historical purposes
#+BEGIN_SRC emacs-lisp
  ;(insert (concat
  ;         (propertize (format "%d packages loaded in %s"
  ;                             (length package-activated-list) (emacs-init-time))
  ;                     'face 'font-lock-comment-face)))
  ;
  ;(dashboard-center-line)
#+END_SRC
** Initialize =which-key=
*** Description
Incredibly useful package; if you are in the middle of a command and don't know what to type next, just wait a second and you'll get a nice buffer with all possible completions
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :init
    (which-key-mode))
#+END_SRC
** Initialize =swiper=
*** Description
When doing C-s to search, you get this very nice and neat mini-buffer that you can traverse with the arrow keys (or C-n and C-p) and then press <RET> to select where you want to go
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package swiper
	:ensure t
	:bind ("C-s" . 'swiper))
#+END_SRC
** Initialize =evil= mode
*** Description
Vim keybindings in Emacs. Please note that Witchmacs has NO other evil-mode compatibility packages because I like to KISS. This might change in the future
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :defer nil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    :config
    (evil-mode 1))

  ;(use-package evil-collection
  ;  :after evil
  ;  :ensure t
  ;  :config
  ;  (evil-collection-init))
#+END_SRC
** Initialize =beacon=
*** Description
You might find beacon an unnecesary package but I find it very neat. It briefly highlights the cursor position when switching to a new window or buffer
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon-mode
    :init
    (beacon-mode 1))
#+END_SRC
** Initialize =avy=
*** Description
Avy is a very useful package; instead of having to move your cursor to a line that is very far away, just do M - s and type the character that you want to move to
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package avy
	:ensure t
	:bind
	("M-s" . avy-goto-char))
#+END_SRC
** Initialize =switch-window=
*** Description
Switch window is a neat package because instead of having to painstakingly do C - x o until you're in the window you want  to edit, you can just do C - x o and pick the one you want to move to according to the letter it is assigned to
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
	:ensure t
	:config
	(setq switch-window-input-style 'minibuffer)
	(setq switch-window-increase 4)
	(setq switch-window-threshold 2)
	(setq switch-window-shortcut-style 'qwerty)
	(setq switch-window-qwerty-shortcuts
		  '("a" "s" "d" "f" "j" "k" "l"))
	:bind
	([remap other-window] . switch-window))
#+END_SRC
** Initialize =ido= and =ido-vertical=
*** Description
For the longest time I used the default way of switching and killing buffers in Emacs. Same for finding files. Ido-mode made these three tasks IMMENSELY easier and more intuitive. Please not that I still use the default way M - x works because I believe all you really need for it is which-key
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :init
    (ido-mode 1)
    :config
    (setq ido-enable-flex-matching nil)
    (setq ido-create-new-buffer 'always)
    (setq ido-everywhere t))

  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  ; This enables arrow keys to select while in ido mode. If you want to
  ; instead use the default Emacs keybindings, change it to
  ; "'C-n-and-C-p-only"
  (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
#+END_SRC
** Initialize =async=
*** Description
Utilize asynchronous processes whenever possible
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package async
	:ensure t
	:init
	(dired-async-mode 1))
#+END_SRC
** Initialize =page-break-lines=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :diminish (page-break-lines-mode visual-line-mode))
#+END_SRC
** Initialize =undo-tree=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode)
#+END_SRC
** Initialize =treemacs=
*** Description
Neat side-bar file and project explorer
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         30)
      (treemacs-resize-icons 11)
	
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
      :ensure t)

    (use-package treemacs-icons-dired
      :after treemacs dired
      :ensure t
      :config (treemacs-icons-dired-mode))
#+END_SRC
** Initialize =magit=
*** Description
Git porcelain for Emacs
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
** Initialize =elfeed=
*** Description
RSS reader for Emacs
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t

    :config
		(setq elfeed-feeds
      '(("https://www.archlinux.org/feeds/news/" linux distro)
        ("https://www.gnome.org/feed/" gnu de)
        ("https://planet.emacslife.com/atom.xml" emacs community)
        ("https://www.ecb.europa.eu/rss/press.html" economics eu)
        ("http://feed.pippa.io/public/shows/teamhuman" podcast culture)
		  ("https://news.ycombinator.com/rss" ycombinator news)
		  ("https://www.phoronix.com/rss.php" phoronix))))
#+END_SRC
** Initialize =vterm=
#+begin_src emacs-lisp
  (use-package vterm
	  :ensure t)
#+end_src
** Built-in entry: =eldoc=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+END_SRC
** Built-in entry: =abbrev=
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package abbrev
    :diminish abbrev-mode)
#+END_SRC
* Languages
** Initialize =company=
*** Description
Company is the autocompletion frontend that takes all the backends and gives you possible autocompletions when writing programs
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish (meghanada-mode company-mode irony-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort)
    :hook
    ((java-mode c-mode c++-mode) . company-mode))
#+END_SRC
** Initialize =yasnippet=
*** Description
Yasnippet provides useful snippets, nothing to do with Company but still useful when used in conjuction with it
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :hook
    ((c-mode c++-mode) . yas-minor-mode)
    :config
    (yas-reload-all))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
** C & C++
*** Description
Irony is the company backend for C and C++
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers
    :defer nil
    :ensure t)

  (use-package company-irony
    :defer nil
    :ensure t
    :config
    (setq company-backends '((company-c-headers
                              company-dabbrev-code
                              company-irony))))
  (use-package irony
    :defer nil
    :ensure t
    :config
    :hook
    ((c++-mode c-mode) . irony-mode)
    ('irony-mode-hook) . 'irony-cdb-autosetup-compile-options)
#+END_SRC
** Java
*** Description
I use meghanada to provide very neat autocompletion when editing Java files. I use it mainly for autocompletion but there's a ton of other things it can do, automatic imports, for example.
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package meghanada
    :ensure t
    :defer nil
    :config
    (add-hook 'java-mode-hook
              (lambda ()
                (meghanada-mode t)))
    (setq meghanada-java-path "java")
    (setq meghanada-maven-path "mvn"))
#+END_SRC
** SLIME
*** Description
Common Lisp
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :defer nil
    :config
    (setq inferior-lisp-program "sbcl")
    (setq slime-contribs '(slime-fancy)))
#+END_SRC
** Geiser
*** Description
Scheme Lisp
*** Code
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t
    :defer nil
    :config
    (setq geiser-active-implementations '(mit)))

  (defun geiser-save ()
    (interactive)
    (geiser-repl--write-input-ring))
	#+end_src
