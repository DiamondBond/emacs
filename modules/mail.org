#+STARTUP: overview
#+TITLE: Mail Configuration
#+AUTHOR: Diamond Bond
#+LANGUAGE: en
#+OPTIONS: num:nil
#+PROPERTY: header-args :mkdirp yes

* Header
Enable lexical binding.
#+begin_src emacs-lisp
  ;;; userconfig.el --- User Configuration. -*- lexical-binding: t; -*-

  ;; Copyright (C) 2022 Diamond Bond
  ;; This file is NOT part of GNU Emacs.
  ;; This file is free software.

  ;; Author: Diamond Bond <diamondbond1@gmail.com>
  ;; URL: https://github.com/diamondbond/emacs
  ;; Package-Requires: ((emacs "28.1"))

  ;;; Commentary:
  ;; This file provides the user configuration.

  ;;; Code:

#+end_src
* Email
** Description

Refer to [[https://github.com/DiamondBond/emacs/blob/master/docs/setupemail.org][Email Setup]].

#+begin_quote

  offlineimap  -  sync

  mu           -  server

  mu4e         -  client

#+end_quote

** Files
#+begin_src conf :tangle .offlineimaprc
  [general]
  accounts = Gmail
  maxsyncaccounts = 1
  pythonfile = ~/.offlineimap.py

  [Account Gmail]
  localrepository = Local
  remoterepository = Remote

  [Repository Local]
  type = Maildir
  localfolders = ~/mail

  [Repository Remote]
  type = Gmail
  remoteuser = diamondbond1@gmail.com
  remotepasseval = get_password_emacs("imap.gmail.com", "diamondbond1@gmail.com", "993")
  realdelete = no

  folderfilter = lambda foldername: foldername not in ['[Gmail]/Spam', '[Gmail]/All Mail', '[Gmail]/Starred', '[Gmail]/Important']

  holdconnectionopen = true
  keepalive = 60
  sslcacertfile = /etc/ssl/certs/ca-certificates.crt
#+end_src

#+begin_src python :tangle .offlineimap.py
  #!/usr/bin/python
  import re, os

  def get_password_emacs(machine, login, port):
	  s = "machine %s login %s port %s password ([^ ]*)\n" % (machine, login, port)
	  p = re.compile(s)
	  authinfo = os.popen("gpg -q --no-tty -d ~/.authinfo.gpg").read()
	  return p.search(authinfo).group(1)
#+end_src
** Functions
*** 1. Compile mu

'mu' binary is output to ~/.emacs.d/straight/repos/mu/build/mu/mu

#+begin_src emacs-lisp
  (defun mu-setup/build-mu-binary ()
	"Compiles 'mu' binary."
	(interactive)
	(async-shell-command "cd ~/.emacs.d/straight/repos/mu; ./autogen.sh; ninja -C build"))
#+end_src

*** 2. Initialize mu

Modify this defun to contain your $maildir & Email address.

#+begin_src emacs-lisp
  (defun mu-setup/init-mu ()
	"Initialize 'mu' db."
	(interactive)
	(async-shell-command "~/.emacs.d/straight/repos/mu/build/mu/mu init --maildir=/home/diamond/mail/ --my-address=diamondbond1@gmail.com"))
#+end_src

*** 3. Rebuild mu index.
#+begin_src emacs-lisp
  (defun mu-setup/rebuild-mu-index ()
	"Rebuilds 'mu' index."
	(interactive)
	(async-shell-command "~/.emacs.d/straight/repos/mu/build/mu/mu index"))
#+end_src
*** 4. Automagic setup
#+begin_src emacs-lisp
  (defun mu-setup/automagic ()
	"Auto-magically configures 'mu'."
	(interactive)
	(mu-setup/build-mu-binary)
	(mu-setup/init-mu)
	(mu-setup/rebuild-mu-index))
#+end_src
** Use-package
*** Initialize =mu4e=
**** Description
mu4e mail client.
**** Code
#+begin_src emacs-lisp
  (use-package mu4e
	:straight ( :host github
				:repo "djcb/mu"
				:branch "master"
				:files ("build/mu4e/*")
				:pre-build (("./autogen.sh") ("make")))
	:custom   (mu4e-mu-binary (expand-file-name "build/mu/mu" (straight--repos-dir "mu")))
	:config
	;; default
	(require 'org-mu4e)
	(setq mu4e-maildir (expand-file-name "~/mail"))

	;; set folders
	(setq mu4e-drafts-folder "/[Gmail].Drafts")
	(setq mu4e-sent-folder   "/[Gmail].Sent Mail")
	(setq mu4e-trash-folder  "/[Gmail].Trash")

	;; don't save message to Sent Messages, GMail/IMAP will take care of this
	(setq mu4e-sent-messages-behavior 'delete)

	;; composing mail
	(setq mu4e-compose-dont-reply-to-self t)

	;; don't keep message buffers around
	(setq message-kill-buffer-on-exit t)

	;; display options
	(setq mu4e-view-show-images t)
	(setq mu4e-view-show-addresses 't)

	;; make sure that moving a message (like to Trash) causes the
	;; message to get a new file name.  This helps to avoid the
	;; dreaded "UID is N beyond highest assigned" error.
	;; See this link for more info: https://stackoverflow.com/a/43461973
	(setq mu4e-change-filenames-when-moving t)

	;; setup some handy shortcuts
	(setq mu4e-maildir-shortcuts
		  '(("/INBOX"             . ?i)
			("/[Gmail].Sent Mail" . ?s)
			("/[Gmail].Trash"     . ?t)))

	;; inbox-query
	(setq db/mu4e-inbox-query
		  "(maildir:/Inbox OR maildir:/INBOX) AND flag:unread")

	;; go-to-inbox function
	(defun db/go-to-inbox ()
	  (interactive)
	  (mu4e-headers-search dw/mu4e-inbox-query))

	;; allow for updating mail using 'U' in the main view:
	(setq mu4e-get-mail-command "offlineimap")

	;; why would I want to leave my message open after I've sent it?
	(setq message-kill-buffer-on-exit t)
	;; don't ask for a 'context' upon opening mu4e
	(setq mu4e-context-policy 'pick-first)
	;; don't ask to quit
	(setq mu4e-confirm-quit nil)
	(mu4e t))
#+end_src
*** Initialize =mu4e-alert=
**** Description
Show alerts for unread emails.
**** Code
#+begin_src emacs-lisp
  (use-package mu4e-alert
	:straight t
	:after mu4e
	:config
	;; show unread emails from all inboxes
	(setq mu4e-alert-interesting-mail-query db/mu4e-inbox-query)

	;; show notifications for mails already notified
	(setq mu4e-alert-notify-repeated-mails nil)
	:init
	(mu4e-alert-enable-notifications))
#+end_src
*** Initialize =smtpmail=
**** Description
smtp mail within Emacs.
**** Code
#+begin_src emacs-lisp
  (use-package smtpmail
	:straight t
	:config
	(setq message-send-mail-function 'smtpmail-send-it
		  starttls-use-gnutls t
		  smtpmail-starttls-credentials
		  '(("smtp.gmail.com" 587 nil nil))
		  smtpmail-auth-credentials
		  (expand-file-name "~/.authinfo.gpg")
		  smtpmail-default-smtp-server "smtp.gmail.com"
		  smtpmail-smtp-server "smtp.gmail.com"
		  smtpmail-smtp-service 587
		  smtpmail-debug-info t))
#+end_src
* Footer
#+begin_src emacs-lisp

  ;;; userconfig.el ends here
#+end_src
